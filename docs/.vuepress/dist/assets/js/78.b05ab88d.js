(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{415:function(s,a,n){"use strict";n.r(a);var t=n(4),r=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"p2、运行原理初探"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2、运行原理初探"}},[s._v("#")]),s._v(" P2、运行原理初探")]),s._v(" "),a("p",[s._v("我们之前写的 HelloSpringBoot，到底是怎么运行的呢，Maven 项目，我们一般从 pom.xml 文件探究起；")]),s._v(" "),a("blockquote",[a("p",[s._v("=================================="),a("strong",[s._v("pom.xml")]),s._v(" ==================================")])]),s._v(" "),a("h3",{attrs:{id:"_2-1、父依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、父依赖"}},[s._v("#")]),s._v(" 2.1、父依赖")]),s._v(" "),a("p",[s._v("其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件！")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.2.5.RELEASE</version>\n    <relativePath/> \x3c!-- lookup parent from repository --\x3e\n</parent>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("点进去，发现还有一个父依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-dependencies</artifactId>\n    <version>2.2.5.RELEASE</version>\n    <relativePath>../../spring-boot-dependencies</relativePath>\n</parent>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这里才是真正管理 SpringBoot 应用里面所有依赖版本的地方，SpringBoot 的版本控制中心；")]),s._v(" "),a("p",[a("strong",[s._v("以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；")])]),s._v(" "),a("h3",{attrs:{id:"_2-2、启动器-spring-boot-starter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、启动器-spring-boot-starter"}},[s._v("#")]),s._v(" 2.2、启动器 "),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=spring-boot&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[s._v("spring-boot"),a("OutboundLink")],1),s._v("-starter")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("springboot-boot-starter-xxx")]),s._v("：就是 spring-boot 的场景启动器")]),s._v(" "),a("p",[a("strong",[s._v("spring-boot-starter-web")]),s._v("：帮我们导入了 web 模块正常运行所依赖的组件；")]),s._v(" "),a("p",[s._v("SpringBoot 将所有的功能场景都抽取出来，做成一个个的 starter （启动器），只需要在项目中引入这些 starter 即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；我们未来也可以自己自定义 starter；")]),s._v(" "),a("blockquote",[a("p",[s._v("================================== "),a("strong",[s._v("主启动类")]),s._v(" ==================================")])]),s._v(" "),a("p",[s._v("分析完了 pom.xml 来看看这个启动类")]),s._v(" "),a("h3",{attrs:{id:"_2-3、默认的主启动类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、默认的主启动类"}},[s._v("#")]),s._v(" 2.3、默认的主启动类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//@SpringBootApplication 来标注一个主程序类\n//说明这是一个Spring Boot应用\n@SpringBootApplication\npublic class SpringbootApplication {\n\n   public static void main(String[] args) {\n     //以为是启动了一个方法，没想到启动了一个服务\n      SpringApplication.run(SpringbootApplication.class, args);\n   }\n\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("但是 ** 一个简单的启动类并不简单！** 我们来分析一下这些注解都干了什么")]),s._v(" "),a("h3",{attrs:{id:"_2-4、-springbootapplication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4、-springbootapplication"}},[s._v("#")]),s._v(" 2.4、@SpringBootApplication")]),s._v(" "),a("p",[s._v("作用：标注在某个类上说明这个类是 SpringBoot 的主配置类 ， SpringBoot 就应该运行这个类的 main 方法来启动 SpringBoot 应用；")]),s._v(" "),a("p",[s._v("进入这个注解：可以看到上面还有很多其他注解！")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication {\n    // ......\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"_2-5、-componentscan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5、-componentscan"}},[s._v("#")]),s._v(" 2.5、@ComponentScan")]),s._v(" "),a("p",[s._v("这个注解在 Spring 中很重要 , 它对应 XML 配置中的元素。")]),s._v(" "),a("p",[s._v("作用：自动扫描并加载符合条件的组件或者 bean ， 将这个 bean 定义加载到 IOC 容器中")]),s._v(" "),a("h3",{attrs:{id:"_2-6、-springbootconfiguration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6、-springbootconfiguration"}},[s._v("#")]),s._v(" 2.6、@SpringBootConfiguration")]),s._v(" "),a("p",[s._v("作用：SpringBoot 的配置类 ，标注在某个类上 ， 表示这是一个 SpringBoot 的配置类；")]),s._v(" "),a("p",[s._v("我们继续进去这个注解查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 点进去得到下面的 @Component\n@Configuration\npublic @interface SpringBootConfiguration {}\n\n@Component\npublic @interface Configuration {}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这里的 @Configuration，说明这是一个配置类 ，配置类就是对应 Spring 的 xml 配置文件；")]),s._v(" "),a("p",[s._v("里面的 @Component 这就说明，启动类本身也是 Spring 中的一个组件而已，负责启动应用！")]),s._v(" "),a("p",[s._v("我们回到 SpringBootApplication 注解中继续看。")]),s._v(" "),a("h3",{attrs:{id:"_2-7、-enableautoconfiguration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-7、-enableautoconfiguration"}},[s._v("#")]),s._v(" 2.7、@EnableAutoConfiguration")]),s._v(" "),a("p",[a("strong",[s._v("@EnableAutoConfiguration ：开启自动配置功能")])]),s._v(" "),a("p",[s._v("以前我们需要自己配置的东西，而现在 SpringBoot 可以自动帮我们配置 ；@EnableAutoConfiguration 告诉 SpringBoot 开启自动配置功能，这样自动配置才能生效；")]),s._v(" "),a("p",[s._v("点进注解接续查看：")]),s._v(" "),a("p",[a("strong",[s._v("@AutoConfigurationPackage ：自动配置包")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@Import({Registrar.class})\npublic @interface AutoConfigurationPackage {\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("@import")]),s._v(" ：Spring 底层注解 @import ， 给容器中导入一个组件")]),s._v(" "),a("p",[s._v("Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到 Spring 容器 ；")]),s._v(" "),a("p",[s._v("这个分析完了，退到上一步，继续看")]),s._v(" "),a("p",[a("strong",[s._v("@Import({AutoConfigurationImportSelector.class}) ：给容器导入组件 ；")])]),s._v(" "),a("p",[s._v("AutoConfigurationImportSelector ：自动配置导入选择器，那么它会导入哪些组件的选择器呢？我们点击去这个类看源码：")]),s._v(" "),a("p",[s._v("1、这个类中有一个这样的方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 获得候选的配置\nprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {\n    //这里的getSpringFactoriesLoaderFactoryClass（）方法\n    //返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration\n    List<String> configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());\n    Assert.notEmpty(configurations, "No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.");\n    return configurations;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("2、这个方法又调用了 SpringFactoriesLoader 类的静态方法！我们进入 SpringFactoriesLoader 类 loadFactoryNames() 方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {\n    String factoryClassName = factoryClass.getName();\n    //这里它又调用了 loadSpringFactories 方法\n    return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("3、我们继续点击查看 loadSpringFactories 方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('private static Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader) {\n    //获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身\n    MultiValueMap<String, String> result = (MultiValueMap)cache.get(classLoader);\n    if (result != null) {\n        return result;\n    } else {\n        try {\n            //去获取一个资源 "META-INF/spring.factories"\n            Enumeration<URL> urls = classLoader != null ? classLoader.getResources("META-INF/spring.factories") : ClassLoader.getSystemResources("META-INF/spring.factories");\n            LinkedMultiValueMap result = new LinkedMultiValueMap();\n\n            //将读取到的资源遍历，封装成为一个Properties\n            while(urls.hasMoreElements()) {\n                URL url = (URL)urls.nextElement();\n                UrlResource resource = new UrlResource(url);\n                Properties properties = PropertiesLoaderUtils.loadProperties(resource);\n                Iterator var6 = properties.entrySet().iterator();\n\n                while(var6.hasNext()) {\n                    Entry<?, ?> entry = (Entry)var6.next();\n                    String factoryClassName = ((String)entry.getKey()).trim();\n                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());\n                    int var10 = var9.length;\n\n                    for(int var11 = 0; var11 < var10; ++var11) {\n                        String factoryName = var9[var11];\n                        result.add(factoryClassName, factoryName.trim());\n                    }\n                }\n            }\n\n            cache.put(classLoader, result);\n            return result;\n        } catch (IOException var13) {\n            throw new IllegalArgumentException("Unable to load factories from location [META-INF/spring.factories]", var13);\n        }\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("p",[s._v("4、发现一个多次出现的文件：spring.factories，全局搜索它")]),s._v(" "),a("h3",{attrs:{id:"_2-8、spring-factories"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8、spring-factories"}},[s._v("#")]),s._v(" 2.8、spring.factories")]),s._v(" "),a("p",[s._v("我们根据源头打开 spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/96fcad1886f23acaba2d6e418b5be170.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("WebMvcAutoConfiguration")])]),s._v(" "),a("p",[s._v("我们在上面的自动配置类随便找一个打开看看，比如 ：WebMvcAutoConfiguration")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/70e07fb65a5768f3cd1b1b46f264869a.png",alt:""}})]),s._v(" "),a("p",[s._v("可以看到这些一个个的都是 JavaConfig 配置类，而且都注入了一些 Bean，可以找一些自己认识的类，看着熟悉一下！")]),s._v(" "),a("p",[s._v("所以，自动配置真正实现是从 classpath 中搜寻所有的 META-INF/spring.factories 配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration 的 JavaConfig 形式的 IOC 容器配置类 ， 然后将这些都汇总成为一个实例并加载到 IOC 容器中。")]),s._v(" "),a("p",[a("strong",[s._v("结论：")])]),s._v(" "),a("ol",[a("li",[s._v("SpringBoot 在启动的时候从类路径下的 META-INF/spring.factories 中获取 EnableAutoConfiguration 指定的值")]),s._v(" "),a("li",[s._v("将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；")]),s._v(" "),a("li",[s._v("整个 J2EE 的整体解决方案和自动配置都在 springboot-autoconfigure 的 jar 包中；")]),s._v(" "),a("li",[s._v("它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；")]),s._v(" "),a("li",[s._v("有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；")])]),s._v(" "),a("p",[a("strong",[s._v("现在大家应该大概的了解了下，SpringBoot 的运行原理，后面我们还会深化一次！")])]),s._v(" "),a("blockquote",[a("p",[s._v("=================================="),a("strong",[s._v("SpringApplication")]),s._v(" ==================================")])]),s._v(" "),a("h3",{attrs:{id:"_2-9、不简单的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-9、不简单的方法"}},[s._v("#")]),s._v(" 2.9、不简单的方法")]),s._v(" "),a("p",[s._v("我最初以为就是运行了一个 main 方法，没想到却开启了一个服务；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@SpringBootApplication\npublic class SpringbootApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootApplication.class, args);\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("SpringApplication.run 分析")])]),s._v(" "),a("p",[s._v("分析该方法主要分两部分，一部分是 SpringApplication 的实例化，二是 run 方法的执行；")]),s._v(" "),a("h3",{attrs:{id:"_2-10、springapplication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-10、springapplication"}},[s._v("#")]),s._v(" 2.10、SpringApplication")]),s._v(" "),a("p",[a("strong",[s._v("这个类主要做了以下四件事情：")])]),s._v(" "),a("p",[s._v("1、推断应用的类型是普通的项目还是 Web 项目")]),s._v(" "),a("p",[s._v("2、查找并加载所有可用初始化器 ， 设置到 initializers 属性中")]),s._v(" "),a("p",[s._v("3、找出所有的应用程序监听器，设置到 listeners 属性中")]),s._v(" "),a("p",[s._v("4、推断并设置 main 方法的定义类，找到运行的主类")]),s._v(" "),a("p",[s._v("查看构造器：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public SpringApplication(ResourceLoader resourceLoader, Class... primarySources) {\n    // ......\n    this.webApplicationType = WebApplicationType.deduceFromClasspath();\n    this.setInitializers(this.getSpringFactoriesInstances();\n    this.setListeners(this.getSpringFactoriesInstances(ApplicationListener.class));\n    this.mainApplicationClass = this.deduceMainApplicationClass();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_2-11、run-方法流程分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-11、run-方法流程分析"}},[s._v("#")]),s._v(" 2.11、run 方法流程分析")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/a6e1f5b3b53c4b22e84245962b3d202f.png",alt:""}})])])}),[],!1,null,null,null);a.default=r.exports}}]);