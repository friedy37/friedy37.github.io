(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{404:function(n,s,t){"use strict";t.r(s);var a=t(4),r=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"p5、自动配置原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#p5、自动配置原理"}},[n._v("#")]),n._v(" P5、自动配置原理")]),n._v(" "),s("p",[n._v("自动配置原理")]),n._v(" "),s("p",[n._v("配置文件到底能写什么？怎么写？")]),n._v(" "),s("p",[n._v("SpringBoot 官方文档中有大量的配置，我们无法全部记住")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/124cd74fa51f4fd88b740f0d28c8225a.png",alt:""}})]),n._v(" "),s("h3",{attrs:{id:"_5-1、分析自动配置原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1、分析自动配置原理"}},[n._v("#")]),n._v(" 5.1、分析自动配置原理")]),n._v(" "),s("p",[n._v("我们以 "),s("strong",[n._v("HttpEncodingAutoConfiguration（Http 编码自动配置）")]),n._v(" 为例解释自动配置原理；")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；\n@Configuration \n\n//启动指定类的ConfigurationProperties功能；\n  //进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；\n  //并把HttpProperties加入到ioc容器中\n@EnableConfigurationProperties({HttpProperties.class}) \n\n//Spring底层@Conditional注解\n  //根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；\n  //这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效\n@ConditionalOnWebApplication(\n    type = Type.SERVLET\n)\n\n//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；\n@ConditionalOnClass({CharacterEncodingFilter.class})\n\n//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；\n  //如果不存在，判断也是成立的\n  //即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；\n@ConditionalOnProperty(\n    prefix = "spring.http.encoding",\n    value = {"enabled"},\n    matchIfMissing = true\n)\n\npublic class HttpEncodingAutoConfiguration {\n    //他已经和SpringBoot的配置文件映射了\n    private final Encoding properties;\n    //只有一个有参构造器的情况下，参数的值就会从容器中拿\n    public HttpEncodingAutoConfiguration(HttpProperties properties) {\n        this.properties = properties.getEncoding();\n    }\n    \n    //给容器中添加一个组件，这个组件的某些值需要从properties中获取\n    @Bean\n    @ConditionalOnMissingBean //判断容器没有这个组件？\n    public CharacterEncodingFilter characterEncodingFilter() {\n        CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n        filter.setEncoding(this.properties.getCharset().name());\n        filter.setForceRequestEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));\n        filter.setForceResponseEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));\n        return filter;\n    }\n    //。。。。。。。\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br")])]),s("p",[s("strong",[n._v("一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！")])]),n._v(" "),s("ul",[s("li",[n._v("一但这个配置类生效；这个配置类就会给容器中添加各种组件；")]),n._v(" "),s("li",[n._v("这些组件的属性是从对应的 properties 类中获取的，这些类里面的每一个属性又是和配置文件绑定的；")]),n._v(" "),s("li",[n._v("所有在配置文件中能配置的属性都是在 xxxxProperties 类中封装着；")]),n._v(" "),s("li",[n._v("配置文件能配置什么就可以参照某个功能对应的这个属性类")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('//从配置文件中获取指定的值和bean的属性进行绑定\n@ConfigurationProperties(prefix = "spring.http") \npublic class HttpProperties {\n    // .....\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("我们去配置文件里面试试前缀，看提示！")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/227b15e3dfe8a079f2838e664bbb469f.png",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("这就是自动装配的原理！")])]),n._v(" "),s("h3",{attrs:{id:"_5-2、精髓"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2、精髓"}},[n._v("#")]),n._v(" 5.2、精髓")]),n._v(" "),s("p",[n._v("1、SpringBoot 启动会加载大量的自动配置类")]),n._v(" "),s("p",[n._v("2、我们看我们需要的功能有没有在 SpringBoot 默认写好的自动配置类当中；")]),n._v(" "),s("p",[n._v("3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）")]),n._v(" "),s("p",[n._v("4、给容器中自动配置类添加组件的时候，会从 properties 类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；")]),n._v(" "),s("p",[s("strong",[n._v("xxxxAutoConfigurartion：自动配置类；")]),n._v(" 给容器中添加组件")]),n._v(" "),s("p",[s("strong",[n._v("xxxxProperties: 封装配置文件中相关属性；")])]),n._v(" "),s("h3",{attrs:{id:"_5-3、了解-conditional"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3、了解-conditional"}},[n._v("#")]),n._v(" 5.3、了解：@Conditional")]),n._v(" "),s("p",[n._v("了解完自动装配的原理后，我们来关注一个细节问题，"),s("strong",[n._v("自动配置类必须在一定的条件下才能生效；")])]),n._v(" "),s("p",[s("strong",[n._v("@Conditional 派生注解（Spring 注解版原生的 @Conditional 作用）")])]),n._v(" "),s("p",[n._v("作用：必须是 @Conditional 指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/2c23d2bf372da743d7df034066afb90a.png",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。")])]),n._v(" "),s("p",[n._v("我们怎么知道哪些自动配置类生效？")]),n._v(" "),s("p",[s("strong",[n._v("我们可以通过启用 debug=true 属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("#开启springboot的调试类\ndebug=true\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[s("strong",[n._v("Positive matches:（自动配置类启用的：正匹配）")])]),n._v(" "),s("p",[s("strong",[n._v("Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）")])]),n._v(" "),s("p",[s("strong",[n._v("Unconditional classes: （没有条件的类）")])]),n._v(" "),s("p",[n._v("【演示：查看输出的日志】")]),n._v(" "),s("p",[n._v("掌握吸收理解原理，即可以不变应万变！")])])}),[],!1,null,null,null);s.default=r.exports}}]);