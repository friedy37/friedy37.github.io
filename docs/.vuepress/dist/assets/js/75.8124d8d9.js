(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{398:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[s._v("#")]),s._v(" 集合")]),s._v(" "),t("p",[t("strong",[s._v("数组和集合类同是容器，区别在于：1、数组虽然也可以存储对象（对象数组），但长度是固定的，集合长度是可变的；2、数组可存储基本数据类型，但集合只能存储对象的内存地址（引用），且集合可存储不同类型的对象")])]),s._v(" "),t("p",[t("strong",[s._v("集合继承体系图")]),s._v("："),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210112181045438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("ArrayList：底层数据结构是动态数组，默认初始化容量为 10（底层先创建了一个长度为 0 的数组，当添加第一个元素的时候，初始化容量为 10），自动扩容（扩容到原容量的 1.5 倍），支持随机访问，查询快，增删慢，非同步，线程不安全，效率高")]),s._v(" "),t("li",[s._v("Vector：底层数据结构是动态数组，查询快，增删慢，同步，线程安全，效率低")]),s._v(" "),t("li",[s._v("LinkedList：底层数据结构是双向链表，不支持随机访问，查询慢，增删快，非同步，线程不安全，效率高")])]),s._v(" "),t("h3",{attrs:{id:"collection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[s._v("#")]),s._v(" Collection")]),s._v(" "),t("ul",[t("li",[s._v("Collection 中的常用功能（以下功能的结果遵循谁调用这个方法谁就改变）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、添加功能\nboolean add(Object obj);//添加一个元素\nboolean addAll(Collection c);//添加一个集合的元素\n\n2、删除功能\nvoid clear();//移除所有元素\nboolean remove(Object o);//移除一个元素\nboolean removeAll(Collection c);//移除一个集合的元素，只要有一个元素被移除就返回true\n\n3、判断功能\nboolean contains(Object o);//判断集合中是否包含指定元素\nboolean containsAll(Collection c);//判断集合中是否包含指定的集合元素，只有包含所有元素才叫包含，才返回true\nboolean isEmpty();//判断集合是否为空\n\n4、长度功能\nint size();//这里获取的是元素的实际个数，不是集合的容量\n\n5、交集功能\n/*\n\t设有两个集合A、B\n\tA.retainAll(B);\n\t若A、B之间有交集就把交集保存到集合A中，若无交集，那么集合A就为空，\n\t至于返回结果则取决于保存交集的A集与保存之前的集合内容是否有变化，\n\t有变化就返回true，没有变化就返回false\n*/\nboolean retainAll(Collection c);\n\n6、集合转数组\nObject[] toArray();//转型后的数组中每一个元素都是Object类型的\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("h3",{attrs:{id:"迭代器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[s._v("#")]),s._v(" 迭代器")]),s._v(" "),t("p",[t("strong",[s._v("集合的迭代也叫集合的遍历，集合的迭代是通过迭代器完成的，迭代器是依赖于集合而存在的，也就是有集合才有迭代器")])]),s._v(" "),t("ul",[t("li",[s._v("迭代器（集合的专用遍历方式）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Iterator<E> iterator();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("Iterator 接口中的方法：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Object next();//获取元素之后自动后移\nboolean hasNext();//判断是否还有元素，如果仍有元素可以迭代就返回true\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("迭代举例")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Collection c = new ArrayList();\n方式一：\nIterator it = c.iterator();//通过集合对象获取迭代器对象\nwhile(it.hasNext())\n{\n\tSystem.out.println(it.next());\n}\n\n方式二：\nfor(Iterator it = c.iterator(); it.hasNext();)\n{\n\tSystem.out.println(it.next());\n}\n\n总：方式一结构清晰；方式二效率更高，运行更快，因为it循环之后就变成垃圾\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("strong",[s._v("问")]),s._v("："),t("em",[s._v("迭代器为什么不定义成一个类，而定义成一个接口？")]),t("br"),s._v(" "),t("strong",[s._v("答")]),s._v("：Java 中提供了很多的集合类，而这些集合类的数据结构是不同的，意味着它们的存储方式和遍历方式也各不相同，遍历一个集合应当具备判断功能和获取功能，因每种集合的方式不太一样，所以把这两个功能提取出来，这种方式就是接口，这个接口的实现类是以内部类的方式体现的")]),s._v(" "),t("h3",{attrs:{id:"list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" List")]),s._v(" "),t("ul",[t("li",[s._v("List 集合：有序的 Collection（也称为序列），此接口的用户可以对列表中每个元素的插入位置进行精确控制，用户可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素，与 Set 不同的是 List 允许重复的元素")]),s._v(" "),t("li",[s._v("List 集合的特点：1、有序（存储和取出的元素顺序一致）；2、可重复")]),s._v(" "),t("li",[s._v("List 集合特有的遍历")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("List  c = new ArrayList();\nfor(int i = 0; i < c.size(); i++)\n{\n\tSystem.out.println(c.get(i));\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("List 集合特有的迭代器（列表迭代器）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("列表迭代器：ListIterator listIterator();\n该迭代器继承了Iterator迭代器，所以也可直接使用hasNext()和next()\n\n列表迭代器特有的功能：\n逆向遍历：\n\tObject previous();//获取上一个元素\n\tboolean hasprevious();//判断是否有元素\n正向遍历：\n\tObject next();\n\tboolean hasNext();\n\n注：ListIterator可以实现逆向遍历，但是必须同一迭代器正向遍历之后才能进行逆向遍历，无实际意义，一般不使用\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h3",{attrs:{id:"linkedlist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[s._v("#")]),s._v(" LinkedList")]),s._v(" "),t("ul",[t("li",[s._v("LinkedList 集合特有的功能")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、添加功能\npublic void addFirst(Object o);//开头添加\npublic void addLast(Object o);//结尾添加\n\n2、获取功能\npublic Object getFirst();//获取开头元素\npublic Object getLast();//获取结尾元素\n\n3、删除功能\npublic Object removeFirst();//删除开头元素并返回被删除元素\npublic Object removeLast();//删除结尾元素并返回被删除元素\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h3",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[s._v("#")]),s._v(" Map")]),s._v(" "),t("ul",[t("li",[s._v("Map 集合：Map 集合中键和值的关系——映射，可以通过键来获取值")]),s._v(" "),t("li",[s._v("Map 集合的特点：将键映射到值的对象，一个映射不能包含重复的键，每个键最多只能映射到一个值（无序不重复）")]),s._v(" "),t("li",[s._v("Map 集合与 Collection 集合的区别：1、Map 集合存储元素是成对出现的（键值对），Map 集合的键是唯一的，值是重复的，Collection 集合存储元素是单独出现的，Collection 的 Set 是唯一的，List 是可重复的；2、Map 集合的数据结构针对键有效，跟值无关，Collecton 集合的数据结构针对元素有效")]),s._v(" "),t("li",[s._v("给定一个键和一个值就可以将该值存储在一个 Map 对象中，之后可通过键来访问对应的值")]),s._v(" "),t("li",[s._v("当访问的值不存在的时候，方法就会抛出一个 NoSuchElementException 异常")]),s._v(" "),t("li",[s._v("当对象的类型和 Map 里元素类型不兼容时，方法就会抛出一个 ClassCastException 异常")]),s._v(" "),t("li",[s._v("当在不允许使用 Null 对象的 Map 中使用 Null 对象时，方法就会抛出一个 NullPointerException 异常")]),s._v(" "),t("li",[t("strong",[s._v("Map 集合中常用的功能：")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、添加功能\n/*\n（key表示键，value表示值）如果键是第一次存储就直接存储元素并返回null，\n如果键不是第一次存储就用现在的值把以前的值替换掉并返回以前的值\n*/\nv put(k key, v value);\n\n2、删除功能\nvoid clear();//移除所有的键值对元素\nv remove(Object key);//根据键删除键值对元素并把值返回\n\n3、判断功能\nboolean containsKey(Object key);//判断集合中是否包含指定的键\nboolean containValue(Object value);//判断集合是否包含指定的值\nboolean isEmpty();//判断集合是否为空\n\n4、长度功能\nint size();//返回集合中键值对的对数\n\n5、获取功能\nv get(Object key);//根据键来获取值\nSet<K> keySet();//获取集合中所有键的集合\nCollection<V> values();//获取集合中所有值的集合\nSet<Map.Entry<K,V>> entrySet();//返回的是键值对对象的集合\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("Map 集合的遍历")]),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210113113825176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}})])]),s._v(" "),t("p",[s._v("Hashtable 与 HashMap 的区别：")]),s._v(" "),t("ul",[t("li",[s._v("Hashtable：线程安全，效率低，不允许 null 键和 null 值，初始容量为 11，扩容是：原容量 * 2+1")]),s._v(" "),t("li",[s._v("HashMap：线程不安全，效率高，允许 null 键和 null 值")])]),s._v(" "),t("h3",{attrs:{id:"哈希表的数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哈希表的数据结构"}},[s._v("#")]),s._v(" 哈希表的数据结构")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210113155125860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}}),t("br"),s._v(" "),t("strong",[s._v("注")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("如果一个类的 equals() 方法重写了，那么它的 hashCode() 方法必须重写")])]),s._v(" "),t("li",[t("strong",[s._v("放在 HashMap 集合 Key（键）部分的和放在 HashSet 集合中的元素需要同时重写 hashCode() 方法和 equals() 方法")])]),s._v(" "),t("li",[t("strong",[s._v("为了提高检索效率，在 JDK8 之后，如果哈希表的单向链表中元素大于等于 8 个 并且 数组长度大于等于 64 时，单向链表这种数据结构才会变成红黑树数据结构，如果数组长度小于 64 则会先将数组进行一次扩容（2 倍），如果扩容之后还没有达到长度 64 则继续比较下一个节点，链表不会转成红黑树，直到 table 数组长度大于等于 64 时单向链表才会变成红黑树，当红黑树上的节点数量小于 6 时，会重新把红黑树变成单向链表")])]),s._v(" "),t("li",[s._v("HashMap 的默认初始化容量是 16（建议是 2 的倍数），加载因子是 0.75（当哈希表的元素超过总容量的 75% 时，哈希表将自动开始扩容（原容量 * 2）")])]),s._v(" "),t("h3",{attrs:{id:"treeset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[s._v("#")]),s._v(" TreeSet")]),s._v(" "),t("p",[t("strong",[s._v("TreeSet 集合底层实际上是一个 TreeMap，也就是一个二叉树，放到 TreeSet 集合中的元素等同于放到 TreeMap 集合的 Key（键）部分了，TreeSet 集合中的元素无序不重复，可以按照元素的大小顺序自动排序")])]),s._v(" "),t("p",[t("strong",[s._v("重点：")]),t("br"),s._v("\nTreeSet 集合自动排序的特点是通过实现 java.lang 包下 Comparable 接口或 java.util 包下的 Comparator 接口来完成的，即要指定比较规则。如 String、Integer 等已经默认实现了 Comparable 接口，所以 TreeSet 中的 String、Integer 就不用再指定比较规则了，而放到 TreeSet 或 TreeMap 集合 key 部分的自定义元素要想做到排序就必须指定比较规则，有如下两种方式：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("自定义元素实现 Comparable 接口中的 compareTo() 方法，在 compareTo() 方法中指定比较规则，这时 TreeSet 或 TreeMap 集合的构造方法是无参构造"),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210114183613333.png",alt:""}}),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210114184024152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}})])]),s._v(" "),t("li",[t("p",[s._v("在构造 TreeSet 或 TreeMap 集合时，用匿名内部类的方式实现比较器 Comparator 接口中的 compare() 方法（也可以单独建一个比较器类实现 Comparator 接口），在 compare() 方法中指定规则，这时 TreeSet 或 TreeMap 集合的构造方法是带参构造"),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210114184115907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}})])])]),s._v(" "),t("p",[s._v("说明：compareTo() 方法的返回值：")]),s._v(" "),t("ul",[t("li",[s._v("返回值 0 表示相同，value 会覆盖")]),s._v(" "),t("li",[s._v("返回值大于 0，会继续在右子树上找（左小右大）")]),s._v(" "),t("li",[s._v("返回追小于 0，会继续在左子树上找（左小右大）")])]),s._v(" "),t("p",[t("em",[s._v("问：Comparable 和 Comparator 怎么选择")]),t("br"),s._v("\n答：当比较规则不会发生改变的时候，或者说当比较规则只有一个的时候建议使用 Comparable 接口，如果比较规则有多个，并且需要多个比较规则之间频繁切换，建议使用 Comparator 接口")]),s._v(" "),t("h3",{attrs:{id:"collections"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collections"}},[s._v("#")]),s._v(" Collections")]),s._v(" "),t("p",[t("strong",[s._v("Collections 是针对集合进行操作的工具类，其中的方法都是静态的")])]),s._v(" "),t("p",[s._v("Collection 与 Collections 的区别：")]),s._v(" "),t("ul",[t("li",[s._v("Collection：是单列集合的顶层接口，有子接口 List 和 Set")]),s._v(" "),t("li",[s._v("Collections：是针对集合操作的工具类")])]),s._v(" "),t("p",[s._v("Collections 类中的常用方法：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、排序，默认情况下是自然排序\npublic static <T> void sort(List<T> list);\n\n2、二分查找\npublic static <T> int binarySearch(List<?> list,T key);\n\n3、最大值（根据元素的自然顺序）\npublic static <T> T max(Collection<?> coll);\n\n4、最小值\npublic static <T> T min(Collection<?> coll);\n\n5、随机转换\npublic static void shuffle(List<?> list);\n\n6、反转\npublic static void reverse(List<?> list);\n\n7、将线程不安全的List转换成线程安全的List（Set和Map也有类似的方法）\npublic static <T> List<T> synchronizedList(List<T> list);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h2",{attrs:{id:"泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[s._v("#")]),s._v(" 泛型")]),s._v(" "),t("p",[t("strong",[s._v("泛型是一种把数据类型明确的工作推迟到创建对象或者调用方法的时候才去明确的特殊的类型，也叫参数化类型，把类型当作参数一样传递")])]),s._v(" "),t("ul",[t("li",[s._v("泛型的格式：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<数据类型> 注：这里的数据类型只能是引用类型\n\n例：ArrayList<String> array = new ArrayList<String>();//array这个集合中所有元素都是String类型的，且只能是String类型的\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("泛型的好处：1、把运行时期的问题提前到了编译期间；2、避免了强制类型转换；3、优化了程序设计；4、增强了程序的安全性")]),s._v(" "),t("li",[s._v("看 API，如果类、接口、抽象类后面跟有 "),t("E",[s._v(" 就表示要使用泛型，一般来说在集合中使用的情况居多")])],1)]),s._v(" "),t("h3",{attrs:{id:"泛型通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型通配符"}},[s._v("#")]),s._v(" 泛型通配符")]),s._v(" "),t("ul",[t("li",[s._v("\n<?>：任意类型，如果没有明确，那么就是 Object 以及任意的 Java 类了\n")]),s._v(" "),t("li",[s._v("泛型如果明确时前后必须一致")]),s._v(" "),t("li",[s._v("？表示任意的类型都可以（后面 new 的类型是任意引用类型）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Collection<?> c1 = new ArrayList<Object>();\nCollection<?> c2 = new ArrayList<Animal>();\nCollection<?> c3 = new ArrayList<Dog>();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("\n<? extends E>：向下限定，后面 new 的类型必须是 E 及其子类\n")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Collection<? extends Animal> c = new ArrayList<Dog>();//Dog继承类Animal\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("\n<? super E>：向上限定，后面 new 的类型必须是 E 及其父类\n")])]),s._v(" "),t("h2",{attrs:{id:"静态导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态导入"}},[s._v("#")]),s._v(" 静态导入")]),s._v(" "),t("p",[t("strong",[s._v("可以直接导入到静态方法的级别")])]),s._v(" "),t("ul",[t("li",[s._v("静态导入格式")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import static 包名.类名.方法名;\n\nimport static java.lang.System.out;\nout.println("java");\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("方法必须是静态的")]),s._v(" "),t("li",[s._v("当有多个同名静态方法时，就必须加前缀使用了，即用静态导入的方法是唯一的")])]),s._v(" "),t("h2",{attrs:{id:"可变参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可变参数"}},[s._v("#")]),s._v(" 可变参数")]),s._v(" "),t("ul",[t("li",[s._v("当定义方法的时候不确定该定义多少个参数时就使用可变参数")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public int sum(int...a);//这里必须是三个点\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("可变参数本质上是一个数组")]),s._v(" "),t("li",[s._v("如果一个方法有可变参数，并且有多个参数时，可变参数必须写在最后面")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public int sum(int b, int c, int...a);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("一个方法只能指定一个可变参数")])]),s._v(" "),t("h2",{attrs:{id:"枚举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[s._v("#")]),s._v(" 枚举")]),s._v(" "),t("p",[t("strong",[s._v("枚举（enum）是一种引用数据类型，编译之后生成 class 文件，枚举中的每一个值可以看作常量")])]),s._v(" "),t("p",[s._v("枚举语法格式;")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("enum 枚举类型名\n{\n\t枚举值1, 枚举值2， 枚举值3...\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("说明：结果只有两种情况的建议使用布尔类型，结果超过两种并且可以一枚一枚列举出来的建议使用枚举类型，如颜色、四季、星期等都可以使用枚举类型")]),s._v(" "),t("p",[s._v("下列程序只是为了演示枚举语法，并无实际开发意义："),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210115103333408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}})]),s._v(" "),t("h2",{attrs:{id:"异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[s._v("#")]),s._v(" 异常")]),s._v(" "),t("h3",{attrs:{id:"异常继承体系图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常继承体系图"}},[s._v("#")]),s._v(" 异常继承体系图")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210116110712822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("错误")]),s._v("：错误不是异常而是脱离程序员控制的问题，Java 程序通常不捕获错误，错误一般发生在严重故障时，它们在 Java 程序处理的范畴外")]),s._v(" "),t("li",[t("strong",[s._v("编译时异常")]),s._v("：也叫受检异常或受控异常，编译时异常不是在编译阶段发生的（"),t("em",[s._v("所有的异常都发生在运行阶段")]),s._v("），它表示必须在编译（编写）程序的时候预先对这种异常进行处理，如果不处理编译器就报错（"),t("strong",[s._v("直接父类为 Exception 的异常称为编译时异常")]),s._v("）")]),s._v(" "),t("li",[t("strong",[s._v("运行时异常")]),s._v("：也叫未受检异常或未受控异常，Runtime Exception 的子类称为运行时异常，运行时异常在编译阶段可处理也可不处理")]),s._v(" "),t("li",[s._v("异常在 Java 中以类的形式存在，每一个异常类都可以创建异常对象")]),s._v(" "),t("li",[s._v("不管是错误还是异常都是可抛出的，所有的错误只要发生，Java 程序只有一个结果，那就是终止程序的执行，退出 JVM，因为错误是不可处理的")])]),s._v(" "),t("h3",{attrs:{id:"处理异常的两种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理异常的两种方式"}},[s._v("#")]),s._v(" "),t("strong",[s._v("处理异常的两种方式")])]),s._v(" "),t("ol",[t("li",[s._v("在方法内部使用 try…catch… 语句进行异常捕捉，可理解为异常自行处理")])]),s._v(" "),t("p",[s._v("try…catch… 语法格式：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("try{\n\t//可能出现异常的代码\n}catch(异常类名 变量名){\n\t//针对异常的提示处理\n}finally{\n\t//不管try内有没有异常出现，finally语句块中的语句一定执行\n\t//这里一般是资源的释放和关闭\n}\n\n注：\n1、虽然说所有的异常类名都可写Exception，但异常类名能明确就明确，方便调错\n2、try语句块中的某一行出现异常该行后面的代码不会执行，只有在try...catch...捕捉异常后，后续代码才可执行\n3、当try语句块中有return时，finally中的语句也会执行，且return语句在finally之后执行，也就是最后执行\n4、如果在执行finally之前JVM退出了（System.exit(0)），那么就不会再执行finally里的语句了\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("出现多个异常时：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("方式一：针对每一个异常写一个try...catch...\n\t\n\t方式二：将异常集中在一个try中，多个catch\n\ttry{\n\t\t...\n\t}catch(异常类名1 变量名){\n\t\t...\n\t}catch(异常类名2 变量名){\n\t\t...\n\t}\n\n注：平级关系的异常谁前谁后无所谓，如果出现父子关系，那么父必须出现在子的后面，否则会报错\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("JDK8 的一个新异常处理方式")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("try{\n\t...\n}catch(异常类名1 | 异常类名2 | ... 变量名){\n\t...\n}\n\n注：这个方法很简洁，特点是处理方式一致，且多个异常间必须是平级关系\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("异常对象有两个重要的方法")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、获取异常简单的描述信息\npublic String getMessage();\n\n2、打印异常追踪的堆栈信息\npublic void printStackTrace();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("例："),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210116113239624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}})]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("在方法声明的位置上使用 throws 关键字，将异常抛给调用者处理（上抛），调用者也面临这两种处理方式")])]),s._v(" "),t("p",[s._v("语法格式：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("throws 异常类名（可以跟多个异常类名）\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210116131657813.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("throws：用于方法声明后面，其后跟的是异常类名，将异常上抛给调用者处理，抛出的异常可能会发生")]),s._v(" "),t("li",[s._v("throw：手动抛异常，用在方法体内，其后跟的是异常对象名，且只能抛出一个异常对象，抛出的异常一定会发生。注意：1、当抛出的是编译时异常就必须与 throws 连用（因为编译时异常必须处理），而抛出的是运行时异常就不必与 throws 连用（因为运行时异常可处理也可不处理）。2、只要异常没有被捕捉，采用上抛的方式，此方法的后续代码不会执行")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public static void myException() throws ClassNotFoundException\n{\n\tClass.forName("文件路径");\n\t//因为异常只是被上抛，没有被处理，所以以下代码不会执行\n\tSystem.out.println("Hello");\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("如果方法内部可以将异常处理就用 try，如果内部处理不了就用 throws 上抛")])]),s._v(" "),t("h3",{attrs:{id:"自定义异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义异常"}},[s._v("#")]),s._v(" 自定义异常")]),s._v(" "),t("p",[s._v("分两步：")]),s._v(" "),t("ol",[t("li",[s._v("编写一个类继承 Exception 或 Runtime Exception，要编写编译时异常就继承 Exception，如果编写运行时异常就继承 Runtime Exception")]),s._v(" "),t("li",[s._v("提供两个构造方法，一个无参构造，一个带有 String 参数的构造方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public class MyException extends Exception //编译时异常\n{\n\tpublic MyException()\n\t{\n\t\t\n\t}\n\tpublic MyException(String s)\n\t{\n\t\tsuper(s);\n\t} \n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h3",{attrs:{id:"final、finally、finalize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final、finally、finalize"}},[s._v("#")]),s._v(" final、finally、finalize")]),s._v(" "),t("ul",[t("li",[s._v("final：关键字，表示最终，修饰类时类不能被继承，修饰方法时方法不能被重写，修饰变量时变量变常量")]),s._v(" "),t("li",[s._v("finally：关键字，是异常处理的一部分，用于释放资源，一般来说其中的代码肯定会执行，特殊情况：在执行到 finally 之前 JVM 退出了")]),s._v(" "),t("li",[s._v("finalize：标识符，Object 类的一个方法，用于垃圾回收")])]),s._v(" "),t("h3",{attrs:{id:"异常注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常注意事项"}},[s._v("#")]),s._v(" 异常注意事项")]),s._v(" "),t("ul",[t("li",[s._v("子类重写父类方法时，子类的方法必须抛出相同的异常或父类异常的子类")]),s._v(" "),t("li",[s._v("如果被重写的方法没有异常抛出，那么子类的方法绝对不可以抛出异常，如果子类方法内部有异常产生，那么子类只能 try…catch…")])]),s._v(" "),t("h2",{attrs:{id:"io-流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#io-流"}},[s._v("#")]),s._v(" IO 流")]),s._v(" "),t("h3",{attrs:{id:"io-流的释义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#io-流的释义"}},[s._v("#")]),s._v(" IO 流的释义")]),s._v(" "),t("p",[t("strong",[s._v("IO 流是数据传输的通道 / 管道，是实现数据输入和输出的基础，通过 IO 流可以完成硬盘文件的读和写")])]),s._v(" "),t("h3",{attrs:{id:"io-流的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#io-流的分类"}},[s._v("#")]),s._v(" IO 流的分类")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210117202910195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}})]),s._v(" "),t("p",[s._v("按照流的方向进行分类（以内存作为参照物）：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("输入流")]),s._v("：数据从硬盘到内存里去叫作输入或读，可理解为读进去")]),s._v(" "),t("li",[t("strong",[s._v("输出流")]),s._v("：数据从内存中出来到硬盘叫作输出或写，可理解为写出来")])]),s._v(" "),t("p",[s._v("按照数据的读取方式进行分类：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("字节流")]),s._v("：按照字节的方式读取数据，一次读取一个字节 byte，等同于一次读取 8 个二进制位，这种流是万能的，什么类型的文件都可以读取，包括：文本文件、图片、声音文件、视频文件")]),s._v(" "),t("li",[t("strong",[s._v("字符流")]),s._v("：按照字符的方式读取数据，一次读取一个字符，这种流是为了方便读取普通文本文件而存在的，但这种流不能读取：图片、声音、视频等文件，只能读取纯文本文件，也读不了 word 文件")])]),s._v(" "),t("p",[s._v("总：在 Java 中只要类名以 “Stream” 结尾的都是字节流，以 “Reader/Writer” 结尾的都是字符流")]),s._v(" "),t("ul",[t("li",[s._v("字节输入流：InputStream")]),s._v(" "),t("li",[s._v("字节输出流：OutputStream")]),s._v(" "),t("li",[s._v("字符输入流：Reader")]),s._v(" "),t("li",[s._v("字符输出流：Writer")])]),s._v(" "),t("p",[s._v("注：1、以上所有的流都实现了 Closeable 接口，表明所有的流都可以关闭，都有 close() 方法，切记用完流之后一定要关闭流。2、所有的输出流都实现了 Flushable 接口，表明所有的输出流都是可以刷新的，都有 flush() 方法，输出流在最终输出完后一定要记得 flush() 方法刷新一下，这个刷新表示将通道当中剩余未输出的数据强行输出完（清空通道），如果没有 flush() 方法可能为导致数据丢失")]),s._v(" "),t("h3",{attrs:{id:"文件专属流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件专属流"}},[s._v("#")]),s._v(" 文件专属流")]),s._v(" "),t("ul",[t("li",[s._v("字节输入流（FileInputStream）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("常用方法\n\n1、返回流当中剩余的没有读到的字节数量\npublic int available();\n\n2、跳过n个字节不读\npublic long skip(long n);\n\n3、返回读到的字节值，每次读一个字节，读完自动后移，文件读完返回-1\npublic int read();\n\n4、将读到的内容存入字节数组中，且最多读入b.length个字节，返回读到的字节总数，文件读完返回-1\npublic int read(byte[] b);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("ul",[t("li",[s._v("字节输出流（FileOutputStream）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("常用方法\n\n1、将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此文件输出流\npublic void write(byte[] b, int off, int len);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("字符输出流与字符输入流的常用方法与以上的区别在于把 byte 数组换成了 char 数组")])]),s._v(" "),t("p",[s._v("文本复制："),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210117222434766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70",alt:""}})]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('用字节流完成文本复制\nFileInputStream fis = null;\n\t\tFileOutputStream fos = null;\n\t\ttry{\n\t\t\t//创建字节输入流对象\n\t\t\tfis = new FileInputStream("src/lianxi_io/myio_1");\n\t\t\t//创建字节输出流对象,true表示追加\n\t\t\tfos = new FileOutputStream("src/lianxi_io/myio_2", true);\n\t\t\t\n\t\t\tbyte[] bytes = new byte[1024];\n\t\t\tint rcount = 0;\n\t\t\twhile((rcount = fis.read(bytes)) != -1)\n\t\t\t{\n\t\t\t\tfos.write(bytes, 0, rcount);\n\t\t\t}\n\t\t\t//输出流刷新（刷新缓冲区）\n\t\t\tfos.flush();\n\t\t} catch (FileNotFoundException e){\n\t\t\t\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e){\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\t//关闭流\n\t\t\tif(fis != null)\n\t\t\t{\n\t\t\t\ttry{\n\t\t\t\t\tfis.close();\n\t\t\t\t} catch (IOException e){\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(fos != null)\n\t\t\t{\n\t\t\t\ttry{\n\t\t\t\t\tfos.close();\n\t\t\t\t} catch (IOException e){\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br")])]),t("h3",{attrs:{id:"转换流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转换流"}},[s._v("#")]),s._v(" 转换流")]),s._v(" "),t("ul",[t("li",[s._v("InputStreamReader")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("通过构造方法将字节输入流转换为字符输入流\npublic InputStreamReader(InputStream in);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("OutputStreamWriter")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("通过构造方法将字节输出流转换为字符输出流\npublic OutputStreamWriter(OutputStream out);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("注")]),s._v("：当一个流的构造方法中需要一个流的时候，这个被传进来的流叫作节点流，外部负责包装的这个流叫包装流或处理流，"),t("strong",[s._v("只需关闭包装流就行，当包装流关闭后节点流会自动关闭")])]),s._v(" "),t("h3",{attrs:{id:"缓冲流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓冲流"}},[s._v("#")]),s._v(" 缓冲流")]),s._v(" "),t("p",[t("strong",[s._v("缓冲流是为了提高数据的读写速度而存在的，因为缓冲流自带缓冲区，不需要再定义数组")])]),s._v(" "),t("ul",[t("li",[s._v("BufferedReader")]),s._v(" "),t("li",[s._v("BufferedWriter")]),s._v(" "),t("li",[s._v("BufferedInputStream")]),s._v(" "),t("li",[s._v("BufferedOutputStream")])]),s._v(" "),t("p",[s._v("注：其中 BufferedReader 的特殊方法")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("一次读取一个文本行，包含该行内容的字符串，不包含任何行终止符，如果已到达文本末尾，则返回 null \npublic String readLine();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"数据流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据流"}},[s._v("#")]),s._v(" 数据流")]),s._v(" "),t("p",[t("strong",[s._v("数据流中 DateOutputStream 可以将数据连同数据的类型一并写入文件中，这个文件不是普通的文本文件，用记事本打不开，只能使用 DateInputStream 去读，并且读的时候需要与写的顺序一致才可以正常取出数据")])]),s._v(" "),t("h3",{attrs:{id:"标准输出流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准输出流"}},[s._v("#")]),s._v(" 标准输出流")]),s._v(" "),t("ul",[t("li",[s._v("printStream")]),s._v(" "),t("li",[s._v("printWriter")])]),s._v(" "),t("p",[s._v("标准的输出流默认输出到控制台")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('System.out.println("Hello");\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("改变输出方向, 输入到指定文本中")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('PrintStream ps = new PrintStream(new FileOutputStream("src/lianxi_io/myio_1", true));\n//改变输出方向\nSystem.setOut(ps);\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"序列化与反序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列化与反序列化"}},[s._v("#")]),s._v(" 序列化与反序列化")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("序列化")]),s._v("：Java 对象按照流的方式存入文本文件或网络中，将 Java 对象的状态保存下来的过程，通过 ObjectOutputStream 完成（对象 ----\x3e 流数据）")]),s._v(" "),t("li",[t("strong",[s._v("反序列化")]),s._v("：将硬盘上的流数据重新恢复到内存中，恢复成 Java 对象，通过 ObjectInputStream 完成（流数据 ----\x3e 对象）")]),s._v(" "),t("li",[t("strong",[s._v("参与序列化和反序列化的对象必须实现 serializable 接口")])]),s._v(" "),t("li",[s._v("serializable 接口只是一个标志接口，这个接口当中什么也没有，它是给 JVM 参考的，当 JVM 识别到这个接口后，就会为实现该接口的类自动生成一个序列化版本号用来标识类")]),s._v(" "),t("li",[s._v("Java 虚拟机识别一个类的时候先通过类名，如果类名一致就再通过序列化版本号")]),s._v(" "),t("li",[s._v("凡是一个类实现了 serializable 接口，建议手动给该类提供一个固定不变的序列化版本号，这样，以后这个类即使被修改了但是版本号没有变，Java 虚拟机也会认为是同一类")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("private static final long serialVersionUID= 1L;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("在实现 serializable 接口的类中若不想某个成员变量被序列化，可用 transient 关键字声明")])]),s._v(" "),t("p",[s._v("实例：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('序列化\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\n\npublic class IoTest\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tObjectOutputStream oos = null;\n\t\ttry{\n\t\t\t//序列化\n\t\t\toos = new ObjectOutputStream(new FileOutputStream("src/lianxi_io/myio_1"));\n\t\t\t\n\t\t\toos.writeObject(new Student("xss", 23));\n\t\t\toos.writeObject(new Student("xxx", 34));\n\t\t\t\n\t\t\toos.flush();\n\t\t} catch (FileNotFoundException e){\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e){\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry{\n\t\t\t\toos.close();\n\t\t\t} catch (IOException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass Student implements Serializable\n{\n\t//手动固定序列化版本号\n\tprivate static final long serialVersionUID = 2L;\n\tprivate String name;\n\tprivate int age;\n\tprivate String address;\n\n\tpublic Student()\n\t{\n\n\t}\n\n\tpublic Student(String name, int age)\n\t{\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\n\tpublic String toString()\n\t{\n\t\treturn "Student []";\n\t}\n\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('反序列化\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\n\npublic class lianxi\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tObjectInputStream ois = null;\n\t\ttry{\n\t\t\t//反序列化\n\t\t\tois = new ObjectInputStream(new FileInputStream("src/lianxi_io/myio_1"));\n\t\t\t\n\t\t\tObject obj1 = ois.readObject();\n\t\t\tSystem.out.println(obj1);\n\t\t\tObject obj2 = ois.readObject();\n\t\t\tSystem.out.println(obj2);\n\t\t} catch (FileNotFoundException e){\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e){\n\t\t\te.printStackTrace();\n\t\t} catch (ClassNotFoundException e){\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry{\n\t\t\t\tois.close();\n\t\t\t} catch (IOException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("h3",{attrs:{id:"file-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#file-类"}},[s._v("#")]),s._v(" File 类")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("相对路径")]),s._v("：从当前路径开始（在 IDEA 和 Eclipse 中，默认的当前路径是项目（project）路径）")]),s._v(" "),t("li",[t("strong",[s._v("绝对路径")]),s._v("：从盘符开始")]),s._v(" "),t("li",[s._v("File 类的概述：文件和目录路径的抽象表示形式")]),s._v(" "),t("li",[s._v("File 类的构造方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、根据一个路径得到FIle对象\npublic File(String pathname);\n\n2、根据一个目录和一个子文件/目录得到File对象\npublic File(String parent, String child);\n\n3、根据一个父File对象和一个子文件/目录得到对象\npublic File(File parent, String child);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("创建功能")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、创建文件，如果已存在该文件就不再创建并返回false\npublic boolean createNewFile();\n\n2、创建文件夹，如果已存在该文件就不再创建并返回false\npublic boolean mkdir();\n\n3、创建文件夹，且是多级创建，如果父文件夹不存在就创建\npublic boolean mkdirs()\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("删除功能（Java 中的删除不走回收站）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("删除文件或文件夹\npublic boolean delete();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("重命名功能（如果路径相同就是重命名，路径不同就是重命名加剪切）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public boolean renameTo(File dest);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("判断功能")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、判断是否是目录/文件夹\npublic boolean isDirectory()\n\n2、判断是否是文件\npublic boolean isFile();\n\n3、判断是否存在\npublic boolean exists();\n\n4、判断是否可读\npublic boolean canRead();\n\n5、判断是否可写\npublic boolean canWrite();\n\n6、判断是否隐藏\npublic boolean isHidden();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("ul",[t("li",[s._v("基本获取功能")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、获取绝对路径\npublic String getAbsolutePath();\n\n2、获取相对路径\npublic String getPath();\n\n3、获取名称\npublic String getName();\n\n4、获取文件大小\npublic long length();\n\n5、获取最后一次修改时间，毫秒值\npublic long lastModified();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("ul",[t("li",[s._v("高级获取功能")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1、获取指定目录下的所有文件或文件夹的名称数组\npublic String[] list();\n\n2、获取指定目录下的所有文件或文件夹的File数组\npublic File[] listFiles();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);