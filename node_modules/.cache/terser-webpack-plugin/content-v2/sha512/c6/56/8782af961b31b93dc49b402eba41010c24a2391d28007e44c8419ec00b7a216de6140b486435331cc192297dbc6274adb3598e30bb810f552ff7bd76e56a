{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{343:function(t,a,r){\"use strict\";r.r(a);var _=r(4),e=Object(_.a)({},(function(){var t=this,a=t._self._c;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"blockquote\",[a(\"p\",[t._v(\"本文由 \"),a(\"a\",{attrs:{href:\"http://ksria.com/simpread/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"简悦 SimpRead\"),a(\"OutboundLink\")],1),t._v(\" 转码， 原文地址 \"),a(\"a\",{attrs:{href:\"https://blog.csdn.net/qq_36816848/article/details/122286610?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122286610-blog-125402008.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122286610-blog-125402008.pc_relevant_default&utm_relevant_index=2#%E4%B8%89%E3%80%81%E8%B6%85%E5%8F%82%E6%95%B0\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"blog.csdn.net\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/be89f4061662d563f123274ebefe3167.gif#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/56be3d8370ef5640c071d53ba673f73f.jpeg\",alt:\"\"}})]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"👨‍💻**作者简介：**大数据专业硕士在读，CSDN 人工智能领域博客专家，阿里云专家博主，专注大数据与人工智能知识分享，**公众号：**GoAI 的学习小屋，免费分享书籍、简历、导图等资料，更有交流群分享 AI 和大数据，加群方式公众号回复 “加群” 或➡️\"),a(\"a\",{attrs:{href:\"https://qm.qq.com/cgi-bin/qm/qr?k=YksJ4zWlaOo_ya7Ey_cpjfbgGxJtQLIZ&jump_from=webapi&authKey=ub6O4L4nqKep8KVTv3pkx%20x18IeIgDuUgKvOL/Wwq2utRODmWnZcxoo8rGHcHnIB\",title:\"点击链接\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"点击链接\"),a(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"🎉\"),a(\"strong\",[t._v(\"AI 学习星球推荐：GoAI 的学习社区\")]),t._v(\"  知识星球是一个致力于提供《机器学习 | 深度学习 | CV | NLP | \"),a(\"a\",{attrs:{href:\"https://edu.csdn.net/cloud/pm_summit?utm_source=blogglc\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"大模型\"),a(\"OutboundLink\")],1),t._v(\" | 多模态 | AIGC 》各个最新 AI 方向综述、论文等成体系的学习资料，配有全面而有深度的专栏内容，包括不限于 前沿论文解读、资料共享、行业最新动态以、实践教程、求职相关（简历撰写技巧、面经资料与心得）多方面综合学习平台，强烈推荐 AI 小白及 AI 爱好者学习，性价比非常高！\"),a(\"strong\",[t._v(\"加入方式\")]),t._v(\"➡️\"),a(\"a\",{attrs:{href:\"https://t.zsxq.com/17H1vZwhY\",title:\"点击进入星球链接\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"点击进入星球链接\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/efeb1e14bb0a72a438234872e06c8cd8.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/3405391cc3dea3db5067c91da597d638.png\",alt:\"\"}}),t._v(\" 神经网络与深度学习结构 (图片选自《神经网络与深度学习》一邱锡鹏)\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"目录\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#目录\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"目录\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95\"}},[t._v(\"常见的分类算法\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t0\"}},[t._v(\"一、深度学习概念\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#%E5%AE%9A%E4%B9%89\"}},[t._v(\"1. 深度学习定义\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t1\"}},[t._v(\"2. 深度学习应用\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t2\"}},[t._v(\"3. 深度学习主要术语\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t3\"}},[t._v(\"二、神经网络基础\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t4\"}},[t._v(\"1. 神经网络组成\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t5\"}},[t._v(\"感知机\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t6\"}},[t._v(\"多层感知机\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t7\"}},[t._v(\"3. 前向传播和反向传播介绍\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t8\"}},[t._v(\"前向传播\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t9\"}},[t._v(\"反向传播\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t10\"}},[t._v(\"三、超参数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t11\"}},[t._v(\"1 什么是超参数？\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t12\"}},[t._v(\"2. 如何寻找超参数的最优值？\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t13\"}},[t._v(\"3. 超参数搜索一般过程？\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t14\"}},[t._v(\"四、激活函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t15\"}},[t._v(\"1. 什么是激活函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t16\"}},[t._v(\"2. 为什么要使用激活函数？\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t17\"}},[t._v(\"3. 为什么激活函数需要非线性函数？\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t18\"}},[t._v(\"4. 常见激活函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t19\"}},[t._v(\"五、优化方法总结\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t20\"}},[t._v(\"一、基本的梯度下降方法\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t21\"}},[t._v(\"（1）随机梯度下降法 SGD\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t22\"}},[t._v(\"（2）批量梯度下降法 BGD\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t23\"}},[t._v(\"小批量梯度下降法 MBGD\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t24\"}},[t._v(\"(4) Adagrad\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t25\"}},[t._v(\"二、Momentum 动量梯度下降\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t26\"}},[t._v(\"三、Adam 优化器\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t27\"}},[t._v(\"四、RMSprop 优化器\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t28\"}},[t._v(\"优化算法小结\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t29\"}},[t._v(\"六、损失函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t30\"}},[t._v(\"1. 损失函数定义\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t31\"}},[t._v(\"2 回归损失函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t32\"}},[t._v(\"(1) 均方误差损失函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t33\"}},[t._v(\"3 分类损失函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t34\"}},[t._v(\"(1) Logistic 损失函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t35\"}},[t._v(\"4. 神经网络中常用的损失函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t36\"}},[t._v(\"(1) ReLU + MSE\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t37\"}},[t._v(\"(2) Sigmoid + Logistic\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t38\"}},[t._v(\"(3) Softmax + Logisitc\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t39\"}},[t._v(\"5. 激活函数、损失函数、优化函数的区别\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t40\"}},[t._v(\"七、CNN 卷积神经网络\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t41\"}},[t._v(\"小白推荐文章：如何通俗易懂地解释卷积？ - 知乎\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t42\"}},[t._v(\"CNN 特点：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t43\"}},[t._v(\"CNN 两大核心：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t44\"}},[t._v(\"1. 局部连接：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t45\"}},[t._v(\"2. 参数共享:\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t46\"}},[t._v(\"CNN 网络介绍\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t47\"}},[t._v(\"1. 卷积层\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t48\"}},[t._v(\"1.1 单通道输入，单卷积核\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t49\"}},[t._v(\"1.2 多通道输入，单卷积核\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t50\"}},[t._v(\"1.3 多通道输入，多卷积核\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t51\"}},[t._v(\"1.4 填充 padding\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t52\"}},[t._v(\"2. 池化层\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t53\"}},[t._v(\"3. 激活函数\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t54\"}},[t._v(\"4. 全连接层\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t55\"}},[t._v(\"5. 网络参数量与计算量\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t56\"}},[t._v(\"卷积层参数 / 卷积计算量\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E8%AE%AD%E7%BB%83\"}},[t._v(\"6. 卷积神经网络训练：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t57\"}},[t._v(\"训练基本流程：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t58\"}},[t._v(\"CNN 详细求解：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t59\"}},[t._v(\"八、经典网络介绍：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t60\"}},[t._v(\"详细网络介绍可参考这篇:\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t61\"}},[t._v(\"卷积神经网络超详细介绍_呆呆的猫的博客 - CSDN 博客_卷积神经网络\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t62\"}},[t._v(\"CNN 总结\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t63\"}},[t._v(\"九、RNN 循环神经网络\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t64\"}},[t._v(\"RNN 的基本原理\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#t65\"}},[t._v(\"十、LSTM 长短期记忆神经网络\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#RNN%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%82%E8%80%83%EF%BC%9A\"}},[t._v(\"LSTM 和 GRU 学习参考我的这篇文章：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"#%E6%9C%AC%E6%96%87%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%8E%A8%E8%8D%90\"}},[t._v(\"本文参考资料及相关深度学习资料推荐\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"机器学习基础学习可参考：\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/qq_36816848/article/details/115601672\",title:\"机器学习知识点总结（待更新）_GoAl的博客-CSDN博客_机器学习知识点总结\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"机器学习知识点总结（待更新）_GoAl 的博客 - CSDN 博客_机器学习知识点总结\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h2\",{attrs:{id:\"常见的分类算法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常见的分类算法\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"常见的分类算法\")])]),t._v(\" \"),a(\"p\",[t._v(\"SVM、神经网络、随机森林、逻辑回归、KNN、贝叶斯\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"常见的监督学习算法\")])]),t._v(\" \"),a(\"p\",[t._v(\"感知机、SVM、人工神经网络、决策树、逻辑回归\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"一、深度学习概念\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、深度学习概念\"}},[t._v(\"#\")]),t._v(\" 一、深度学习概念\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-深度学习定义\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-深度学习定义\"}},[t._v(\"#\")]),t._v(\" 1. 深度学习定义\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"深度学习定义\")]),t._v(\"：一般是指通过训练多层网络结构对未知数据进行分类或回归\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"深度学习分类\")]),t._v(\"：有监督学习方法——深度前馈网络、卷积神经网络、循环神经网络等；\")]),t._v(\" \"),a(\"p\",[t._v(\"无监督学习方法——深度信念网、深度玻尔兹曼机，深度自编码器等。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"深度学习的思想：\")])]),t._v(\" \"),a(\"p\",[t._v(\"深度神经网络的基本思想是通过构建多层网络，对目标进行多层表示，以期通过多层的高层次特征来表示数据的抽象语义信息，获得更好的特征鲁棒性。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-深度学习应用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-深度学习应用\"}},[t._v(\"#\")]),t._v(\" 2. 深度学习应用\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"图像处理领域主要应用\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"图像分类 (物体识别)：整幅图像的分类或识别\")]),t._v(\" \"),a(\"li\",[t._v(\"物体检测：检测图像中物体的位置进而识别物体\")]),t._v(\" \"),a(\"li\",[t._v(\"图像分割：对图像中的特定物体按边缘进行分割\")]),t._v(\" \"),a(\"li\",[t._v(\"图像回归：预测图像中物体组成部分的坐标\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"语音识别领域主要应用\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"语音识别：将语音识别为文字\")]),t._v(\" \"),a(\"li\",[t._v(\"声纹识别：识别是哪个人的声音\")]),t._v(\" \"),a(\"li\",[t._v(\"语音合成：根据文字合成特定人的语音\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"自然语言处理领域主要应用\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"语言模型：根据之前词预测下一个单词。\")]),t._v(\" \"),a(\"li\",[t._v(\"情感分析：分析文本体现的情感 (正负向、正负中或多态度类型)。\")]),t._v(\" \"),a(\"li\",[t._v(\"神经机器翻译：基于统计语言模型的多语种互译。\")]),t._v(\" \"),a(\"li\",[t._v(\"神经自动摘要：根据文本自动生成摘要。\")]),t._v(\" \"),a(\"li\",[t._v(\"机器阅读理解：通过阅读文本回答问题、完成选择题或完型填空。\")]),t._v(\" \"),a(\"li\",[t._v(\"自然语言推理：根据一句话 (前提) 推理出另一句话(结论)。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"综合应用\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"图像描述：根据图像给出图像的描述句子\")]),t._v(\" \"),a(\"li\",[t._v(\"可视问答：根据图像或视频回答问题\")]),t._v(\" \"),a(\"li\",[t._v(\"图像生成：根据文本描述生成图像\")]),t._v(\" \"),a(\"li\",[t._v(\"视频生成：根据故事自动生成视频\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_3-深度学习主要术语\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-深度学习主要术语\"}},[t._v(\"#\")]),t._v(\" 3. 深度学习主要术语\")]),t._v(\" \"),a(\"p\",[t._v(\"参考这篇文章：\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/qq_36816848/article/details/122286807\",title:\"机器学习与深度学习基础概念详解_GoAl的博客-CSDN博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"机器学习与深度学习基础概念详解_GoAl 的博客 - CSDN 博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h2\",{attrs:{id:\"二、神经网络基础\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、神经网络基础\"}},[t._v(\"#\")]),t._v(\" 二、神经网络基础\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-神经网络组成\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-神经网络组成\"}},[t._v(\"#\")]),t._v(\" 1. 神经网络组成\")]),t._v(\" \"),a(\"p\",[t._v(\"人工神经网络（Artificial Neural Networks，简写为 ANNs）是一种模仿动物神经网络行为特征，进行分布式并行信息处理的算法数学模型。这种网络依靠系统的复杂程度，通过调整内部大量节点之间相互连接的关系，从而达到处理信息的目的，并具有自学习和自适应的能力。神经网络类型众多，其中最为重要的是多层感知机。为了详细地描述神经网络，我们先从最简单的神经网络说起。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"感知机\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#感知机\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"感知机\")])]),t._v(\" \"),a(\"p\",[t._v(\"感知机是 1957 年，由 Rosenblatt 提出会，是\"),a(\"strong\",[t._v(\"神经网络和支持向量机\")]),t._v(\"的基础。\")]),t._v(\" \"),a(\"p\",[t._v(\"感知机是有生物学上的一个启发，他的参照对象和理论依据可以参照下图：（我们的大脑可以认为是一个神经网络，是一个生物的神经网络，在这个生物的神经网络里边呢，他的最小单元我们可以认为是一个神经元，一个 neuron，这些很多个神经元连接起来形成一个错综复杂的网络，我们把它称之为神经网络。当然我们现在所说的，在\"),a(\"a\",{attrs:{href:\"https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0\",title:\"深度学习\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"深度学习\"),a(\"OutboundLink\")],1),t._v(\"包括机器学习指的神经网络 Neural Networks 实际上指的是人工神经网络 Artificial Neural Networks，简写为 ANNs。我们只是简化了。我们人的神经网络是由这样一些神经元来构成的，那么这个神经元他的一些工作机制呢就是通过这样一个下面图的结构，首先接收到一些信号，这些信号通过这些树突 (dendrite) 组织，树突组织接收到这些信号送到细胞里边的细胞核(nucleus)，这些细胞核对接收到的这些信号，这些信号是以什么形式存在的呢？这些信号比如说眼睛接收到的光学啊，或者耳朵接收到的声音信号，到树突的时候会产生一些微弱的生物电，那么就形成这样的一些刺激，那么在细胞核里边对这些收集到的接收到的刺激进行综合的处理，当他的信号达到了一定的阈值之后，那么他就会被激活，就会产生一个刺激的输出，那么就会形成一个我们大脑接收到的进一步的信号，那么他是通过轴突这样的输出计算的，这就是我们人脑的一个神经元进行感知的时候大致的一个工作原理。）\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/67774bba081e7aac235a05992c75821d.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"简单的感知机如下图所示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/16e9184a82d320dadcb86dc40ca8a312.jpeg\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/78d12eb89e43e90879a333aba9b045e0.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"设置合适的 x 和 b，一个简单的感知机单元的与非门表示如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/8e1da1f431481c17b963ebe23dbf1b48.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"当输入为 0，1 时，感知机输出为 0 × (− 2) + 1 × ( − 2 ) + 3 = 1 。\")]),t._v(\" \"),a(\"p\",[t._v(\"复杂一些的感知机由简单的感知机单元组合而成：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/1de61824191c362f6b59fa3c263645b9.png\",alt:\"\"}})]),t._v(\" \"),a(\"h4\",{attrs:{id:\"多层感知机\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多层感知机\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"多层感知机\")])]),t._v(\" \"),a(\"p\",[t._v(\"多层感知机由感知机推广而来，最主要的特点是有多个神经元层，因此也叫深度神经网络。相比于单独的感知机，多层感知机的第 i ii 层的每个神经元和第 i − 1 i-1i−1 层的每个神经元都有连接。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/61d8f6c1ce8b3400940b55fa0d8a7b4e.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"输出层可以不止有 11 个神经元。隐藏层可以只有 11 层，也可以有多层。输出层为多个神经元的神经网络例如下图所示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/37dc07d3a7a1d1ab6f80522abbff232e.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"2. 神经网络有哪些常用模型结构？\")])]),t._v(\" \"),a(\"p\",[t._v(\"人工神经网络由神经元模型构成，这种由许多神经元组成的信息处理网络具有并行分布结构。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/6e078df53017bfc84c540bf674125435.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"其中圆形节点表示一个神经元，方形节点表示一组神经元。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"下图包含了大部分常用的模型：\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/9339ba152f26020cc2ebdf2113981642.jpeg\",alt:\"\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3-前向传播和反向传播介绍\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-前向传播和反向传播介绍\"}},[t._v(\"#\")]),t._v(\" 3. 前向传播和反向传播介绍\")]),t._v(\" \"),a(\"p\",[t._v(\"神经网络的计算主要有两种：前向传播（foward propagation, FP）作用于每一层的输入，通过逐层计算得到输出结果；反向传播（backward propagation, BP）作用于网络的输出，通过计算梯度由深到浅更新网络参数。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"前向传播\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#前向传播\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"前向传播\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/f3641010fcf38a687a15c20ecebf9387.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"假设上一层结点 i , j , k , . . . i,j,k,...i,j,k,... 等一些结点与本层的结点 w ww 有连接，那么结点 w ww 的值怎么算呢？就是通过上一层的 i , j , k , . . . i,j,k,...i,j,k,... 等结点以及对应的连接权值进行加权和运算，最终结果再加上一个偏置项（图中为了简单省略了），最后在通过一个非线性函数（即激活函数），如 R e L u ReLuReLu，s i g m o i d sigmoidsigmoid 等函数，最后得到的结果就是本层结点 w ww 的输出。\")]),t._v(\" \"),a(\"p\",[t._v(\"最终不断的通过这种方法一层层的运算，得到输出层结果。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"反向传播\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反向传播\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"反向传播\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/weixin_38347387/article/details/82936585\",title:\"反向传播——通俗易懂_chengchaowei的博客-CSDN博客_反向传播\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"反向传播——通俗易懂_chengchaowei 的博客 - CSDN 博客_反向传播\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/54b89c180be6487b3f28a9c73ab765d0.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"由于我们前向传播最终得到的结果，以分类为例，最终总是有误差的，那么怎么减少误差呢，当前应用广泛的一个算法就是梯度下降算法，但是求梯度就要求偏导数，下面以图中字母为例讲解一下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/ec29ecedfe76a364b591cfb7bdc74374.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"此部分待更新！\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"三、超参数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、超参数\"}},[t._v(\"#\")]),t._v(\" 三、超参数\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-什么是超参数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-什么是超参数\"}},[t._v(\"#\")]),t._v(\" 1 什么是超参数？\")]),t._v(\" \"),a(\"p\",[t._v(\"​ \"),a(\"strong\",[t._v(\"超参数\")]),t._v(\" : 在机器学习的上下文中，超参数是在开始学习过程之前设置值的参数，而不是通过训练得到的参数数据。通常情况下，需要对超参数进行优化，给学习机选择一组最优超参数，以提高学习的性能和效果。\")]),t._v(\" \"),a(\"p\",[t._v(\"​ 超参数通常存在于：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"1.  定义关于模型的更高层次的概念，如复杂性或学习能力。\\n2.  不能直接从标准模型培训过程中的数据中学习，需要预先定义。\\n3.  可以通过设置不同的值，训练不同的模型和选择更好的测试值来决定\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),a(\"br\")])]),a(\"p\",[t._v(\"​ 超参数具体来讲比如算法中的学习率（learning rate）、梯度下降法迭代的数量（iterations）、隐藏层数目（hidden layers）、隐藏层单元数目、激活函数（ activation function）都需要根据实际情况来设置，这些数字实际上控制了最后的参数和的值，所以它们被称作超参数。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-如何寻找超参数的最优值\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-如何寻找超参数的最优值\"}},[t._v(\"#\")]),t._v(\" 2. 如何寻找超参数的最优值？\")]),t._v(\" \"),a(\"p\",[t._v(\"​ 在使用机器学习算法时，总有一些难调的超参数。例如权重衰减大小，高斯核宽度等等。这些参数需要人为设置，设置的值对结果产生较大影响。常见设置超参数的方法有：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"猜测和检查：根据经验或直觉，选择参数，一直迭代。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"网格搜索：让计算机尝试在一定范围内均匀分布的一组值。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"随机搜索：让计算机随机挑选一组值。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"贝叶斯优化：使用贝叶斯优化超参数，会遇到贝叶斯优化算法本身就需要很多的参数的困难。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"MITIE 方法，好初始猜测的前提下进行局部优化。它使用 BOBYQA 算法，并有一个精心选择的起始点。由于 BOBYQA 只寻找最近的局部最优解，所以这个方法是否成功很大程度上取决于是否有一个好的起点。在 MITIE 的情况下，我们知道一个好的起点，但这不是一个普遍的解决方案，因为通常你不会知道好的起点在哪里。从好的方面来说，这种方法非常适合寻找局部最优解。稍后我会再讨论这一点。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"最新提出的 LIPO 的全局优化方法。这个方法没有参数，而且经验证比随机搜索方法好。\")])])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_3-超参数搜索一般过程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-超参数搜索一般过程\"}},[t._v(\"#\")]),t._v(\" 3. 超参数搜索一般过程？\")]),t._v(\" \"),a(\"p\",[t._v(\"超参数搜索一般过程：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"将数据集划分成训练集、验证集及测试集。\")]),t._v(\" \"),a(\"li\",[t._v(\"在训练集上根据模型的性能指标对模型参数进行优化。\")]),t._v(\" \"),a(\"li\",[t._v(\"在验证集上根据模型的性能指标对模型的超参数进行搜索。\")]),t._v(\" \"),a(\"li\",[t._v(\"步骤 2 和步骤 3 交替迭代，最终确定模型的参数和超参数，在测试集中验证评价模型的优劣。\")])]),t._v(\" \"),a(\"p\",[t._v(\"其中，搜索过程需要搜索算法，一般有：网格搜索、随机搜过、启发式智能搜索、贝叶斯搜索。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"四、激活函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、激活函数\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"四、激活函数\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-什么是激活函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-什么是激活函数\"}},[t._v(\"#\")]),t._v(\" 1. 什么是激活函数\")]),t._v(\" \"),a(\"p\",[t._v(\"激活函数 (Activation functions) 对于人工神经网络 模型去学习、理解非常复杂和非线性的函数来说具有十分重要的作用。它们将非线性特性引入到我们的网络中。如下图，在神经元中，输入的 inputs 通过加权，求和后，还被作用了一个函数，这个函数就是激活函数。**引入激活函数是为了增加神经网络模型的非线性。**没有激活函数的每层都相当于矩阵相乘。就算你叠加了若干层之后，无非还是个矩阵相乘罢了。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/8d5d70e847b28517ae1fce9d885d0178.png\",alt:\"\"}})]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-为什么要使用激活函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-为什么要使用激活函数\"}},[t._v(\"#\")]),t._v(\" 2. 为什么要使用激活函数？\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"激活函数对模型学习、理解非常复杂和非线性的函数具有重要作用。\")]),t._v(\" \"),a(\"li\",[t._v(\"激活函数可以引入非线性因素。如果不使用激活函数，则输出信号仅是一个简单的线性函数。线性函数一个一级多项式，线性方程的复杂度有限，从数据中学习复杂函数映射的能力很小。没有激活函数，神经网络将无法学习和模拟其他复杂类型的数据，例如图像、视频、音频、语音等。\")]),t._v(\" \"),a(\"li\",[t._v(\"激活函数可以把当前特征空间通过一定的线性映射转换到另一个空间，让数据能够更好的被分类。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_3-为什么激活函数需要非线性函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-为什么激活函数需要非线性函数\"}},[t._v(\"#\")]),t._v(\" 3. 为什么激活函数需要非线性函数？\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"假若网络中全部是线性部件，那么线性的组合还是线性，与单独一个线性分类器无异。这样就做不到用非线性来逼近任意函数。\")]),t._v(\" \"),a(\"li\",[t._v(\"使用非线性激活函数 ，以便使网络更加强大，增加它的能力，使它可以学习复杂的事物，复杂的表单数据，以及表示输入输出之间非线性的复杂的任意函数映射。使用非线性激活函数，能够从输入输出之间生成非线性映射。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_4-常见激活函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-常见激活函数\"}},[t._v(\"#\")]),t._v(\" 4. 常见激活函数\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/8e16dcf79724ac60263efcee51384995.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/77a19d5ad5ddc490ac8b8976f99b6aaf.png\",alt:\"\"}})]),t._v(\" \"),a(\"h4\",{attrs:{id:\"激活函数详细学习参考以下资料\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#激活函数详细学习参考以下资料\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"激活函数详细学习参考以下资料：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://ai-wx.blog.csdn.net/article/details/104729911\",title:\"激活函数的前世今生_不积跬步，无以至千里！\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"激活函数的前世今生_不积跬步，无以至千里！\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://ai-wx.blog.csdn.net/article/details/118914829\",title:\"激活函数常见问题总结_不积跬步，无以至千里\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"激活函数常见问题总结_不积跬步，无以至千里\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/shyjhyp11/article/details/109279411\",title:\"深度学习笔记_各种激活函数总结对比_惊鸿一博-CSDN博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"深度学习笔记_各种激活函数总结对比_惊鸿一博 - CSDN 博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[t._v(\"优秀总结参考：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"https://www.cnblogs.com/wj-1314/p/12015278.html\",title:\"【推荐】深度学习笔记——常用的激活（激励）函数\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【推荐】深度学习笔记——常用的激活（激励）函数\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/JNingWei/article/details/79210904\",title:\"深度学习: 激活函数 (Activation Functions)\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"深度学习: 激活函数 (Activation Functions)\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/34aa278b70a4a97f2008dde22a1e6e53.png\",alt:\"\"}})]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"一些选择激活函数的经验法则：\"),a(\"br\"),t._v(\"\\n如果输出是 0、1 值（二分类问题），则输出层选择 \"),a(\"strong\",[t._v(\"sigmoid\")]),t._v(\" 函数，然后其它的所有单元都选择 \"),a(\"strong\",[t._v(\"Relu\")]),t._v(\" 函数。这是很多激活函数的默认选择，如果在隐藏层上不确定使用哪个激活函数，那么通常会使用 \"),a(\"strong\",[t._v(\"Relu\")]),t._v(\" 激活函数。有时，也会使用 \"),a(\"strong\",[t._v(\"tanh\")]),t._v(\" 激活函数。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"五、优化方法总结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五、优化方法总结\"}},[t._v(\"#\")]),t._v(\" 五、优化方法总结\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"一、基本的梯度下降方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、基本的梯度下降方法\"}},[t._v(\"#\")]),t._v(\" 一、基本的梯度下降方法\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"梯度下降算法简介：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s/YhEGL2LT3qv0oBXteb8IpA\",title:\"通俗易懂讲解梯度下降法！\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"通俗易懂讲解梯度下降法！\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"梯度下降学习入门视频推荐：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://www.bilibili.com/video/BV18P4y1j7uH?spm_id_from=333.999.0.0\",title:\"【梯度下降】人工智能的灵魂，你悟出她的真谛了吗？\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【梯度下降】人工智能的灵魂，你悟出她的真谛了吗？\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://www.bilibili.com/video/BV1sg4y1i7xy?spm_id_from=333.999.0.0\",title:\"【干货】深度学习必备：深入浅出的学习（梯度下降算法）_哔哩哔哩_bilibili\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【干货】深度学习必备：深入浅出的学习（梯度下降算法）_哔哩哔哩_bilibili\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[t._v(\"深度学习网络训练过程可以分成两大部分：前向计算过程与反向传播过程。前向计算过程，是指通过我们预先设定好的卷积层、池化层等等，按照规定的网络结构一层层前向计算，得到预测的结果。反向传播过程，是为了将设定的网络中的众多参数一步步调整，使得预测结果能更加贴近真实值。\")]),t._v(\" \"),a(\"p\",[t._v(\"那么，在反向传播过程中，很重要的一点就是：参数如何更新？或者问的更具体点：参数应该朝着什么方向更新？\")]),t._v(\" \"),a(\"p\",[t._v(\"显然，参数应该是朝着目标损失函数下降最快的方向更新，\"),a(\"strong\",[t._v(\"更确切的说，要朝着梯度方向更新！\")]),t._v(\" 假设网络参数是 θ \\\\thetaθ，学习率是 η \\\\etaη，网络表示的函数是 J (θ) J(\\\\theta)J(θ)，函数此时对θ \\\\thetaθ的梯度为：▽ θ J ( θ ) \\\\bigtriangledown_{\\\\theta }J(\\\\theta)▽θ​J(θ)，于是参数 θ \\\\thetaθ 的更新公式可表示为：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/5089464e4d17fdbfff0d3af7adbfdd63.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"在深度学习中，有三种最基本的梯度下降算法：SGD、BGD、MBGD，他们各有优劣。根据不同的数据量和参数量，可以选择一种具体的实现形式，在训练神经网络是优化算法大体可以分为两类：1）调整学习率，使得优化更稳定；2）梯度估计修正，优化训练速度。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/fdd28743a5cd4908f97e73c471498fe5.jpeg#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-随机梯度下降法-sgd\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-随机梯度下降法-sgd\"}},[t._v(\"#\")]),t._v(\" （1）随机梯度下降法 SGD\")]),t._v(\" \"),a(\"p\",[t._v(\"随机梯度下降法 (Stochastic Gradient Descent，SGD)，每次迭代（更新参数）只使用\"),a(\"strong\",[t._v(\"单个训练样本\")]),t._v(\"（ x (i) , y ( i ) ） （x^{(i)}, y^{(i)}）（x(i),y(i)），其中 x 是输入数据，y 是标签。因此，参数更新表达式如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/427c6f9f283849cd80db8a2a1780a994.png#pic_center\",alt:\"\"}}),a(\"br\"),t._v(\"\\n优点： SGD 一次迭代只需\"),a(\"strong\",[t._v(\"对一个样本进行计算\")]),t._v(\"，因此运行速度很快，还可用于在线学习。\")]),t._v(\" \"),a(\"p\",[t._v(\"缺点：（1）由于单个样本的随机性，实际过程中，目标损失函数值会剧烈波动，一方面，SGD 的波动使它能够跳到新的可能更好的局部最小值。另一方面，使得训练永远不会收敛，而是会一直在最小值附近波动。（2）一次迭代只计算一张图片，没有发挥 GPU 并行运算的优势，使得整体计算的效率不高。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-批量梯度下降法-bgd\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-批量梯度下降法-bgd\"}},[t._v(\"#\")]),t._v(\" （2）批量梯度下降法 BGD\")]),t._v(\" \"),a(\"p\",[t._v(\"批量梯度下降法 (Batch Gradient Descent，BGD)，每次迭代更新中\"),a(\"strong\",[t._v(\"使用所有的训练样本\")]),t._v(\"，参数更新表达式如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/d14cab9f787e95e7fffc2b1457130814.png#pic_center\",alt:\"\"}}),a(\"br\"),t._v(\"\\n优缺点分析：BGD 能保证收敛到凸误差表面的全局最小值和非凸表面的局部最小值。但每迭代一次，需要用到训练集中的所有数据，如果数据量很大，那么迭代速度就会非常慢。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"小批量梯度下降法-mbgd\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小批量梯度下降法-mbgd\"}},[t._v(\"#\")]),t._v(\" 小批量梯度下降法 MBGD\")]),t._v(\" \"),a(\"p\",[t._v(\"小批（3）量梯度下降法 (Mini-Batch Gradient Descent，MBGD)，折中了 BGD 和 SGD 的方法，\"),a(\"strong\",[t._v(\"每次迭代使用 batch_size 个训练样本\")]),t._v(\"进行计算，参数更新表达式如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/3ed9fef0f3f4cb6585310308930ced65.png#pic_center\",alt:\"\"}}),a(\"br\"),t._v(\"\\n优缺点分析：因为每次迭代使用多个样本，所以 MBGD 比 SGD 收敛更稳定，也能避免 BGD 在数据集过大时迭代速度慢的问题。因此，MBGD 是深度学习网络训练中经常使用的梯度下降方法。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"深度学习中，一般的 mini-batch 大小为 64~256，考虑到电脑存储设置和使用的方式，如果 mini-batch 是 2 的次方，代码会运行地更快一些。\")]),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/eddff6f6a88935eda3a87ae937056ae7.png\",alt:\"\"}}),a(\"br\"),t._v(\"\\n上图是 BGD 和 MBGD 训练时，损失代价函数的变化图。可见 BGD 能使代价函数逐渐减小，最终保证收敛到凸误差表面的全局最小值；MBGD 的损失代价函数值比较振荡，但最终也能优化到损失最小值。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_4-adagrad\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-adagrad\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"(4) Adagrad\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/c47d5eeda41ae2dd5a0f2e4cf18a7fc1.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/2561ae6e034092e116df91004f4205b8.png\",alt:\"\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_5-adadelta\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-adadelta\"}},[t._v(\"#\")]),t._v(\" （5）Adadelta\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#\"}},[t._v(\"#\")]),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/0e3188b61e192420e4124484aa4f6db2.png\",alt:\"\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_6-rmsprop-优化器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-rmsprop-优化器\"}},[t._v(\"#\")]),t._v(\" （6）RMSprop 优化器\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/3a71d74d631829252eb61fda6c8e7b50.png\",alt:\"\"}})]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"RMSProp 算法的全称叫 Root Mean Square Prop（均方根传递），是 Hinton 在 Coursera 课程中提出的一种优化算法，在上面的 Momentum 优化算法中，虽然初步解决了优化中摆动幅度大的问题。\")])]),t._v(\" \"),a(\"p\",[t._v(\"为了进一步优化损失函数在更新中存在摆动幅度过大的问题，并且进一步加快函数的收敛速度，RMSProp 算法对权重 W 和偏置 b 的梯度使用了微分平方加权平均数。优化后的效果如下：蓝色的为 Momentum 优化算法所走的路线，绿色的为 RMSProp 优化算法所走的路线。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/06c20eb2e71e766b4852ed4075398d73.png#pic_center\",alt:\"\"}}),a(\"br\"),t._v(\"\\n假设在第 t 轮迭代过程中，各个公式如下所示：\"),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/ce4caa14d977887817607c639369c6ce.png#pic_center\",alt:\"\"}}),a(\"br\"),t._v(\"\\n在上面的公式中 Sdw​ 和 Sdb​ 分别是损失函数在前 t−1 轮迭代过程中累积的\"),a(\"strong\",[t._v(\"梯度平方动量\")]),t._v(\"， β 是梯度累积的一个指数。所不同的是，\"),a(\"strong\",[t._v(\"RMSProp 算法对梯度计算了微分平方加权平均数\")]),t._v(\"。这种做法有利于消除了摆动幅度大的方向，用来修正摆动幅度，使得各个维度的摆动幅度都较小。另一方面也使得网络函数收敛更快。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"二、momentum-动量梯度下降\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、momentum-动量梯度下降\"}},[t._v(\"#\")]),t._v(\" 二、Momentum 动量梯度下降\")]),t._v(\" \"),a(\"p\",[t._v(\"Momentum 主要引入了\"),a(\"strong\",[t._v(\"基于梯度的移动指数加权平均\")]),t._v(\"的思想，即当前的参数更新方向不仅与当前的梯度有关，也受历史的加权平均梯度影响。对于\"),a(\"strong\",[t._v(\"梯度指向相同方向的维度，动量会积累并增加\")]),t._v(\"，而对于梯度\"),a(\"strong\",[t._v(\"改变方向的维度，动量会减少更新\")]),t._v(\"。这也就使得收敛速度加快，同时又不至于摆动幅度太大。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"strong\",[t._v(\"动量梯度下降法作用是加快学习速度，还有一定摆脱局部最优的能力。如下图红色线所示：\")]),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/b1e95e84536b50ee9a0a1b5297eb2e68.png\",alt:\"\"}})])]),t._v(\" \"),a(\"p\",[t._v(\"动量梯度下降（Momentum）的参数更新表达式如下所示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/7a5502846312540ff87aa5e796be2b3d.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"其中，λ  表示动量参数 momentum；当λ = 0 时，即是普通的 SGD 梯度下降。0 < λ < 1 ，表示带了动量的 SGD 梯度下降参数更新方式，λ 通常取 0.9。\")])]),t._v(\" \"),a(\"p\",[t._v(\"普通 SGD 的缺点：SGD 很难在沟壑（即曲面在一个维度上比在另一个维度上弯曲得更陡的区域）中迭代，这在局部最优解中很常见。在这些场景中，SGD 在沟壑的斜坡上振荡，同时沿着底部向局部最优方向缓慢前进。为了缓解这一问题，引入了动量 momentum。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/55aaf64227fdd563a2794d9231213ce2.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"本质上，当使用动量时，如同我们将球推下山坡。球在滚下坡时积累动量，在途中变得越来越快。同样的事情发生在参数更新上：对于梯度指向相同方向的维度，动量会积累并增加，而对于梯度改变方向的维度，动量会减少更新。\"),a(\"strong\",[t._v(\"结果，我们获得了更快的收敛和减少的振荡。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"三、adam-优化器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、adam-优化器\"}},[t._v(\"#\")]),t._v(\" 三、Adam 优化器\")]),t._v(\" \"),a(\"p\",[t._v(\"Adam 是另一种参数\"),a(\"strong\",[t._v(\"自适应学习率\")]),t._v(\"的方法，\"),a(\"strong\",[t._v(\"相当于 RMSprop + Momentum\")]),t._v(\"，利用\"),a(\"strong\",[t._v(\"梯度的一阶矩估计和二阶矩估计动态调整\")]),t._v(\"每个参数的学习率。公式如下：\")]),t._v(\" \"),a(\"p\",[t._v(\"一阶矩和二阶矩 m t 、 v t m_t、v_tmt​、vt​ 类似于动量，将其初始化为：m 0 = 0 , v 0 = 0 m_{0}=0, v_{0}=0m0​=0,v0​=0\")]),t._v(\" \"),a(\"p\",[t._v(\"m t 、 v t m_t、v_tmt​、vt​分别是梯度的一阶矩（均值）和二阶矩（非中心方差）的估计值：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/6f0207848346c4fed69b5e31c762a8cd.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"由于移动指数平均在迭代开始的初期会导致和开始的值有较大的差异，所以我们需要对上面求得的几个值做偏差修正。通过计算偏差校正的一阶和二阶矩估计来抵消这些偏差：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/de31e7c03e6ed6f9bcd48978c2bc9d20.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"然后使用这些来更新参数，就像在 RMSprop 中看到的那样， Adam 的参数更新公式：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/8be9a4dc9b7b49414b27c5cea705e6dc.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"在 Adam 算法中，参数 β1 所对应的就是 Momentum 算法中的 β 值，一般取 0.9，参数 β2 所对应的就是 RMSProp 算法中的 β 值，一般我们取 0.999，而 ϵ 是一个平滑项，我们一般取值为 1 0 − 8 10^{−8}10−8，而学习率则需要我们在训练的时候进行微调。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/32943902505a61f007dcea09520e1e14.png\",alt:\"\"}})]),t._v(\" \"),a(\"h4\",{attrs:{id:\"优化算法小结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#优化算法小结\"}},[t._v(\"#\")]),t._v(\" 优化算法小结\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://zhuanlan.zhihu.com/p/22252270\",title:\"深度学习最全优化方法比较（SGD，Adagrad，Adadelta，Adam，Adamax，Nadam） - 知乎\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"深度学习最全优化方法比较（SGD，Adagrad，Adadelta，Adam，Adamax，Nadam） - 知乎\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/53960d199ec9dd7a678cd26454093f86.png\",alt:\"\"}})]),t._v(\" \"),a(\"h4\",{attrs:{id:\"pytorch-中优化器与学习率衰减方法总结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pytorch-中优化器与学习率衰减方法总结\"}},[t._v(\"#\")]),t._v(\" Pytorch 中优化器与学习率衰减方法总结\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/ys1305/article/details/94332643\",title:\"pytorch中优化器与学习率衰减方法总结_ys1305的博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"pytorch 中优化器与学习率衰减方法总结_ys1305 的博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h2\",{attrs:{id:\"六、损失函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六、损失函数\"}},[t._v(\"#\")]),t._v(\" 六、损失函数\")]),t._v(\" \"),a(\"p\",[t._v(\"入门学习视频：\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://www.bilibili.com/video/BV1RL411T7mT?spm_id_from=333.999.0.0\",title:\"【线性回归、代价函数、损失函数】动画理解，爱上数学\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【线性回归、代价函数、损失函数】动画理解，爱上数学\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-损失函数定义\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-损失函数定义\"}},[t._v(\"#\")]),t._v(\" 1. 损失函数定义\")]),t._v(\" \"),a(\"p\",[t._v(\"在机器学习任务中，大部分监督学习算法都会有一个目标函数 (Objective Function), 算法对该目标函数进行优化，称为优化算法的过程。 例如在分类或者回归任务中，使用损失函数 ( Loss Function ) 作为其目标函数对算法模型进行优化 。\"),a(\"br\"),t._v(\"\\n在 BP 神经网络中，一般推导中，使用均方误差作为损失函数，而在实际中，常用交叉熵作为损失函数。如下图所示，我们可以清晰地观察到不同的损失函数在梯度下降过程中的收敛速度和性能都是不同的。\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"均方误差作为损失函数收敛速度慢，可能会陷入局部最优解；\")]),t._v(\" \"),a(\"li\",[t._v(\"而交叉熵作为损失函数的收敛速度比均方误差快，且较为容易找到函数最优解.\")])]),t._v(\" \"),a(\"p\",[t._v(\"因此了解损失函数的类型并掌握损失函数的使用技巧，有助于加深对深度学习的认知.\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/d318f4338c95725afd4310aededcf202.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/d94b97912c464101dd11bdc7705ddff4.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"对于分类和回归模型使用的损失函数不同，下面将分别进行介绍。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-回归损失函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-回归损失函数\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"2 回归损失函数\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-均方误差损失函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-均方误差损失函数\"}},[t._v(\"#\")]),t._v(\" (1) 均方误差损失函数\")]),t._v(\" \"),a(\"p\",[t._v(\"均方误差 (Mean Squared Error Loss, MSE) 损失函数定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/079775c1a632ff72f45b354bcf219fa4.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码示例\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"def mean_squared_error(y_true, y_pred):\\n    return np.mean(np.square(y_pred - y_true), axis=-1)\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[t._v(\"(2) 平均绝对误差损失函数\")])]),t._v(\" \"),a(\"p\",[t._v(\"平均绝对误差 (Mean Absolute Error Loss, MAE) 损失函数定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/aea36a41ee0747621667835d6aee765e.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码示例\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"def mean_absolute_error(y_true, y_pred):\\n    return np.mean(np.abs(y_pred - y_true), axis=-1)\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[t._v(\"(3) 均方误差对数损失函数\")])]),t._v(\" \"),a(\"p\",[t._v(\"均方误差对数 (Mean Squared Log Error Loss, MSLE) 损失函数定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/1360419b7b69b2889474b1abfef10293.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码示例\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"def mean_squared_logarithmic_error(y_true, y_pred):\\n    first_log = np.log(np.clip(y_pred, 10e-6, None) + 1.)\\n    second_log = np.log(np.clip(y_true, 10e-6, None) + 1.)\\n    return np.mean(np.square(first_log - second_log), axis=-1)\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[t._v(\"(4) 平均绝对百分比误差损失函数\")])]),t._v(\" \"),a(\"p\",[t._v(\"平均绝对百分比 (Mean Absolute Percentage Error Loss, MAPE) 误差损失函数定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/21df496724a02c2c378ecfcbe6cbe088.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码示例\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"def mean_absolute_percentage_error(y_true, y_pred):\\n    diff = np.abs((y_pred - y_true) / np.clip(np.abs(y_true), 10e-6, None))\\n    return 100 * np.mean(diff, axis=-1)\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[t._v(\"(5) 小结\")])]),t._v(\" \"),a(\"p\",[t._v(\"均方误差损失函数是使用最广泛的，并且在大部分情况下，均方误差有着不错的性能，因此被用作损失函数的基本衡量指标。MAE 则会比较有效地惩罚异常值，如果数据异常值较多，需要考虑使用平均绝对误差损失作为损失函数。一般情况下，为了不让数据出现太多异常值，可以对数据进行预处理操作。\"),a(\"br\"),t._v(\"\\n均方误差对数损失与均方误差的计算过程类似，多了对每个输出数据进行对数计算，目的是缩小函数输出的范围值。平均绝对百分比误差损失则计算预测值与真实值的相对误差。均方误差对数损失与平均绝对百分 比误差损失实际上是用来处理大范围数据 ([ − 10 5 , 10 5] 的，但是在神经网络中，我们常把输入数据归一化到一个合理范围 ( [ − 1 , 1 ])，然后再使用均方误差或者平均绝对误差损失来计算损失。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#-2\"}},[t._v(\"#\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"3 分类损失函数\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-logistic-损失函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-logistic-损失函数\"}},[t._v(\"#\")]),t._v(\" (1) Logistic 损失函数\")]),t._v(\" \"),a(\"p\",[t._v(\"Logistic 损失函数定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/d25297c530a25ee20dc5e5632a15b678.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"(2) 负对数似然损失函数\")])]),t._v(\" \"),a(\"p\",[t._v(\"负对数似然损失函数 (Negative Log Likelihood Loss) 定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/bc990409ecde74f3d76931694b8fc2d1.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"(3) 交叉熵损失函数\")])]),t._v(\" \"),a(\"p\",[t._v(\"Logistic 损失函数和负对数似然损失函数只能处理二分类问题，对于两个分类扩展到 M 个分类，使用交叉熵损失函数 (Cross Entropy Loss)，其定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/0438b87274f528302417b363b0df84da.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码示例\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"def cross_entropy(y_true, y_pred):\\n    return -np.mean(y_true * np.log(y_pred + 10e-6))\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[t._v(\"(4) Hinge 损失函数\")])]),t._v(\" \"),a(\"p\",[t._v(\"运用 Hinge 损失的典型分类器是 SVM 算法，因为 Hinge 损失可以用来解决间隔最大化问题。当分类模型需要硬分类结果的，例如分类结果是 0 或 1 、 -1 或 1 的二分类数据， Hinge 损失是最方便的选择 。Hinge 损失函数定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/1cea60ed41ff54af7749ea130df590b4.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码示例\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"def hinge(y_true, y_pred):\\n    return np.mean(np.maximum(1. - y_true * y_pred, 0.), axis=-1)\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[t._v(\"(5) 指数损失函数\")])]),t._v(\" \"),a(\"p\",[t._v(\"使用指数 (Exponential) 损失函数的典型分类器是 AdaBoost 算法，指数损失函数的定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/15ea77c277dc2d8ff764c7b23bbaf73c.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码示例\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"def exponential(y_true, y_pred):\\n    return np.sum(np.exp(-y_true * y_pred))\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"_4-神经网络中常用的损失函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-神经网络中常用的损失函数\"}},[t._v(\"#\")]),t._v(\" 4. 神经网络中常用的损失函数\")]),t._v(\" \"),a(\"p\",[t._v(\"神经网络中的损失函数可以自定义，前提是需要考虑数据本身和用于求解的优化方案。换句话说，自定义损失函数需要考虑输入的数据形式和对损失函数求导的算法。自定义损失函数其实是有些难度的，在实际工程项目上，结合激活函数来选择损失函数是常见的做法，常用组合有以下 3 种 。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-relu-mse\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-relu-mse\"}},[t._v(\"#\")]),t._v(\" (1) ReLU + MSE\")]),t._v(\" \"),a(\"p\",[t._v(\"均方误差损失函数无法处理梯度消失问题，而使用 Leak ReLU 激活函数能够减少计算时梯度消失的问题，因此在神经网络中如果需要使用均方误差损失函数，一般采用 Leak ReLU 等可以减少梯度消失的激活函数。另外，由于均方误差具有普遍性，一般作为衡量损失值的标准，因此使用均方误差作为损失函数表现既不会太好也不至于太差。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-sigmoid-logistic\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-sigmoid-logistic\"}},[t._v(\"#\")]),t._v(\" (2) Sigmoid + Logistic\")]),t._v(\" \"),a(\"p\",[t._v(\"Sigmoid 函数会引起梯度消失问题：根据链式求导法，Sigmoid 函数求导后由多个［0, 1］范围的数进行连乘，如其导数形式为 ，当其中一个数很小时，连成后会无限趋近于零直至最后消失。而类 Logistic 损失函数求导时，加上对数后连乘操作转化为求和操作，在一定程度上避免了梯度消失，所以我们经常可以看到 \"),a(\"strong\",[t._v(\"Sigmoid 激活函数＋交叉摘损失函数\")]),t._v(\" 的组合。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_3-softmax-logisitc\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-softmax-logisitc\"}},[t._v(\"#\")]),t._v(\" (3) Softmax + Logisitc\")]),t._v(\" \"),a(\"p\",[t._v(\"在数学上，Softmax 激活函数会返回输出类的互斥概率分布，也就是能把离散的输出转换为一个同分布互斥的概率，如 (0.2, 0.8)。另外，Logisitc 损失函数是基于概率的最大似然估计函数而来的，因此输出概率化能够更加方便优化算法进行求导和计算，所以我们经常可以看到输出层使 xu 用 \"),a(\"strong\",[t._v(\"Softmax 激活函数＋交叉熵损失函数\")]),t._v(\" 的组合。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"损失函数学习参考：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/weixin_44222014/article/details/103271192\",title:\"深度学习-常用损失函数详细介绍_算法之美-CSDN博客_深度学习的损失函数\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"深度学习 - 常用损失函数详细介绍_算法之美 - CSDN 博客_深度学习的损失函数\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_5-激活函数、损失函数、优化函数的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-激活函数、损失函数、优化函数的区别\"}},[t._v(\"#\")]),t._v(\" 5. 激活函数、损失函数、优化函数的区别\")]),t._v(\" \"),a(\"p\",[t._v(\"**1. 激活函数：**将神经网络上一层的输入，经过神经网络层的非线性变换转换后，通过激活函数，得到输出。常见的激活函数包括：sigmoid, tanh, relu 等。\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/u013250416/article/details/80991831\",title:\"[深度学习]神经网络的激活函数_北望花村-CSDN博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"[深度学习] 神经网络的激活函数_北望花村 - CSDN 博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[t._v(\"**2. 损失函数：**度量神经网络的输出的预测值，与实际值之间的差距的一种方式。常见的损失函数包括：最小二乘损失函数、交叉熵损失函数、回归中使用的 smooth L1 损失函数等。\")]),t._v(\" \"),a(\"p\",[t._v(\"**3. 优化函数：**也就是如何把损失值从神经网络的最外层传递到最前面。如最基础的梯度下降算法，随机梯度下降算法，批量梯度下降算法，带动量的梯度下降算法，Adagrad，Adadelta，Adam 等。\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/u013250416/article/details/81090059\",title:\"[深度学习]梯度下降算法、优化方法（SGD,Adagrad,Adam...)_北望花村-CSDN博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"[深度学习] 梯度下降算法、优化方法（SGD,Adagrad,Adam...)_北望花村 - CSDN 博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h2\",{attrs:{id:\"七、cnn-卷积神经网络\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#七、cnn-卷积神经网络\"}},[t._v(\"#\")]),t._v(\" 七、CNN 卷积神经网络\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/TeFuirnever/article/details/100057229\",title:\"资料推荐：大话卷积神经网络CNN（干货满满）-CSDN博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"资料推荐：大话卷积神经网络 CNN（干货满满）-CSDN 博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h4\",{attrs:{id:\"小白推荐文章-如何通俗易懂地解释卷积-知乎\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小白推荐文章-如何通俗易懂地解释卷积-知乎\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"小白推荐文章：\"),a(\"a\",{attrs:{href:\"https://www.zhihu.com/question/22298352/answer/91131073\",title:\"如何通俗易懂地解释卷积？ - 知乎\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"如何通俗易懂地解释卷积？ - 知乎\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"卷积神经网络（Convolutional Neural Networks, CNN）是一类包含卷积计算且具有深度结构的前馈神经网络（Feedforward Neural Networks），是深度学习（deep learning）的代表算法之一 。目前 CNN 已经得到了广泛的应用，比如：人脸识别、自动驾驶、美图秀秀、安防等很多领域。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"卷积神经网络 – CNN 最擅长的就是图片的处理。它受到人类视觉神经系统的启发。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"cnn-特点\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cnn-特点\"}},[t._v(\"#\")]),t._v(\" CNN 特点：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"能够有效的将大数据量的图片降维成小数据量。\")]),t._v(\" \"),a(\"li\",[t._v(\"能够有效的保留图片特征，符合图片处理的原则。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"cnn-两大核心\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cnn-两大核心\"}},[t._v(\"#\")]),t._v(\" CNN 两大核心：\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"卷积层最主要的两个特征就是局部连接和权值共享，有些地方又叫做稀疏连接和参数共享。\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"通过卷积操作实现局部连接，这个局部区域的大小就是滤波器 filter，避免了全连接中参数过多造成无法计算的情况，\")]),t._v(\" \"),a(\"li\",[t._v(\"再通过参数共享来缩减实际参数的数量，为实现多层网络提供了可能。\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/45725385559d5be2ace0add56c83e1f6.gif\",alt:\"\"}})]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-局部连接\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-局部连接\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"1. 局部连接：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"一般认为图像的空间联系是局部的像素联系比较密切，而距离较远的像素相关性较弱，因此，每个神经元没必要对全局图像进行感知，只要对局部进行感知，然后在更高层将局部的信息综合起来得到全局信息。利用卷积层实现：（特征映射，每个特征映射是一个神经元阵列）：从上一层通过局部卷积滤波器提取局部特征。卷积层紧跟着一个用来求局部平均与二次提取的计算层，这种二次特征提取结构减少了特征分辨率。\")]),t._v(\" \"),a(\"li\",[t._v(\"即网络部分连通，每个神经元只与上一层的部分神经元相连，只感知局部，而不是整幅图像。（滑窗实现）\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-参数共享\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-参数共享\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"2. 参数共享:\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"在局部连接中，每个神经元的参数都是一样的，即：\"),a(\"strong\",[t._v(\"同一个卷积核在图像中都是共享的\")]),t._v(\"。（理解：卷积操作实际是在提取一个个局部信息，而局部信息的一些统计特性和其他部分是一样的，也就意味着这部分学到的特征也可以用到另一部分上。所以对图像上的所有位置，都能使用同样的学习特征。）卷积核共享有个问题：提取特征不充分，可以通过增加多个卷积核来弥补，可以学习多种特征。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"对于一个 100x100 像素的图像，如果我们用一个神经元来对图像进行操作，这个神经元大小就是 100x100=10000，单如果我们使用 10x10 的卷积核，我们虽然需要计算多次，但我们需要的参数只有 10x10=100 个，加上一个偏向 b，一共只需要 101 个参数。我们取得图像大小还是 100x100。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"如果我们取得图像比较大，它的参数将会更加多。我们通过 10*10 的卷积核对图像进行特征提取，这样我们就得到一个 Feature Map。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"一个卷积核只能提取一个特征，所以我们需要多几个卷积核，假设我们有 6 个卷积核，我们就会得到 6 个 Feature Map，将这 6 个 Feature Map 组成一起就是一个神经元。这 6 个 Feature Map 我们需要 101*6=606 个参数。这个值和 10000 比还是比较小的。\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"cnn-网络介绍\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cnn-网络介绍\"}},[t._v(\"#\")]),t._v(\" CNN 网络介绍\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"以下主要介绍：卷积层、池化层、激活函数、全连接层概念及原理\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/ebd728972c051e92be1e0db624b13e26.png\",alt:\"\"}}),t._v(\"​\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/7df311b788caf102ae851fe5ae1ac53c.png\",alt:\"\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-卷积层\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-卷积层\"}},[t._v(\"#\")]),t._v(\" 1. 卷积层\")]),t._v(\" \"),a(\"p\",[t._v(\"卷积是一种有效提取图片特征的方法 。 一般用一个正方形卷积核，遍历图片上的每一个像素点。图片与卷积核重合区域内相对应的每一个像素值，乘卷积核内相对应点的权重，然后求和， 再加上偏置后，最后得到输出图片中的一个像素值。\"),a(\"br\"),t._v(\"\\n图片分灰度图和彩色图，卷积核可以是单个也可以是多个，因此卷积操作分以下三种情况：\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-1-单通道输入-单卷积核\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-单通道输入-单卷积核\"}},[t._v(\"#\")]),t._v(\" 1.1 单通道输入，单卷积核\")]),t._v(\" \"),a(\"p\",[t._v(\"这里单通道指的是输入为灰度图，单卷积核值卷积核个数是 1 个。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/84259242c41f45d210b73826a73d350d.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"​\"),a(\"br\"),t._v(\"\\n上面是 5x5x1 的灰度图片，1 表示单通道，5x5 表示分辨率，共有 5 行 5 列个灰度值。若用一个 3x3x1 的卷积核对此 5x5x1 的灰度图片进行卷积，偏置项 b=1，则求卷积的计算是：(-1)x1+0x0+1x2+(-1)x5+0x4+1x2+(-1)x3+0x4+1x5+1=1（注意不要忘记加偏置 1）。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-2-多通道输入-单卷积核\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-多通道输入-单卷积核\"}},[t._v(\"#\")]),t._v(\" 1.2 多通道输入，单卷积核\")]),t._v(\" \"),a(\"p\",[t._v(\"多数情况下，输入的图片是 RGB 三个颜色组成的彩色图，输入的图片包含了红、绿、蓝三层数据，\"),a(\"strong\",[t._v(\"卷积核的深度（通道数）应该等于输入图片的通道数\")]),t._v(\"，所以使用 3x3x3 的卷积核，最后一个 3 表示匹配输入图像的 3 个通道，这样这个卷积核有三通道，\"),a(\"strong\",[t._v(\"每个通道都会随机生成 9 个待优化的参数\")]),t._v(\"，一共有 27 个待优化参数 w 和一个偏置 b。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/9892dc6ec45e53625425a965c9483033.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"​\"),a(\"br\"),t._v(\"\\n注：这里还是单个卷积核的情况，但是一个卷积核可以有多个通道。默认情况下，\"),a(\"strong\",[t._v(\"卷积核的通道数等于输入图片的通道数。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-3-多通道输入-多卷积核\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-多通道输入-多卷积核\"}},[t._v(\"#\")]),t._v(\" 1.3 多通道输入，多卷积核\")]),t._v(\" \"),a(\"p\",[t._v(\"多通道输入、多卷积核是深度\"),a(\"a\",{attrs:{href:\"https://so.csdn.net/so/search?q=%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C\",title:\"神经网络\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"神经网络\"),a(\"OutboundLink\")],1),t._v(\"中间最常见的形式。指的是多通道输入，且用多个卷积核的情况。那么卷积过程其实也很简单，\"),a(\"strong\",[t._v(\"以 3 通道输入，2 个卷积核为例\")]),t._v(\"：\")]),t._v(\" \"),a(\"p\",[t._v(\"（1）先取出一个卷积核与 3 通道的输入进行卷积，这个过程就和\"),a(\"strong\",[t._v(\"多通道输入，单卷积核\")]),t._v(\"一样，得到一个 1 通道的输出 output1。同样再取出第二个卷积核进行同样的操作，得到第二个输出 output2\"),a(\"br\"),t._v(\"\\n（2）将相同 size 的 output1 与 output2 进行堆叠，就得到 2 通道的输出 output。\")]),t._v(\" \"),a(\"p\",[t._v(\"为了更直观地理解，下面给出图示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/169403c77443f1d202a669e8dcd0f4f8.png#pic_center\",alt:\"\"}}),t._v(\"​\"),a(\"br\"),t._v(\"\\n图中输入 X:[1,h,w,3] 指的是：输入 1 张高 h 宽 w 的 3 通道图片。\"),a(\"br\"),t._v(\"\\n卷积核 W:[k,k,3,2] 指的是：卷积核尺寸为 3*3，通道数为 3，个数为 2。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"总结：\")]),a(\"br\"),t._v(\"\\n（1）卷积操作后，\"),a(\"strong\",[t._v(\"输出的通道数 = 卷积核的个数\")]),a(\"br\"),t._v(\"\\n（2）卷积核的个数和卷积核的通道数是不同的概念。每层卷积核的个数在设计网络时会给出，但是卷积核的通道数不一定会给出。默认情况下，\"),a(\"strong\",[t._v(\"卷积核的通道数 = 输入的通道数\")]),t._v(\"，因为这是进行卷积操作的\"),a(\"strong\",[t._v(\"必要条件\")]),t._v(\"。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"卷积与同道解释参考：\"),a(\"a\",{attrs:{href:\"https://blog.csdn.net/yilulvxing/article/details/107452153\",title:\"CNN卷积核与通道讲解\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"CNN 卷积核与通道讲解\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"p\",[t._v(\"（3）\"),a(\"strong\",[t._v(\"偏置数 = 卷积核数\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-4-填充-padding\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-4-填充-padding\"}},[t._v(\"#\")]),t._v(\" 1.4 填充 padding\")]),t._v(\" \"),a(\"p\",[t._v(\"为了使卷积操作后能得到满意的输出图片尺寸，经常会使用 padding 对输入进行填充操作。默认在图片周围填充 0。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"（1）全零填充 padding='same’\")]),a(\"br\"),t._v(\"\\n使用 same 时，会自动对原图进行全 0 填充，当步长为 1 时，可以保证输出的图片与输入的图片尺寸一致。\"),a(\"br\"),t._v(\"\\n输出尺寸计算公式：\"),a(\"strong\",[t._v(\"输入长 / 步长 （向上取整）\")]),a(\"br\"),t._v(\"\\nTensorFlow 中实现如下：（这里以卷积核个数：48，卷积核尺寸：3，步长：1，全填充为例）\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# 例如要在上下左右各填充一个单位，实现如下：\\nlayers.Conv2D(48, kernel_size=3, strides=1, padding=[[0,0], [1,1], [1,1], [0,0]])\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[t._v(\"（2）不填充 padding='valid’\")]),a(\"br\"),t._v(\"\\n使用 valid 时，不进行任何填充，直接进行卷积，这是 layers.Conv2D() 默认的方式。\"),a(\"br\"),t._v(\"\\n输出尺寸计算公式：（\"),a(\"strong\",[t._v(\"输入长 - 核长）/ 步长 + 1 （向下取整）\")]),a(\"br\"),t._v(\"\\nTensorFlow 中实现如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"layers.Conv2D(48, kernel_size=3, strides=1, padding='valid')\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[t._v(\"（3）自定义填充\")]),a(\"br\"),t._v(\"\\n一般是从上下左右四个方向进行填充，且左、右填充的列数 p w p_wpw​一般相同，上、下填充的行数 p h p_hph​也应该相同。如下图所示：\"),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/49c386bf631e34dc736e43e9beb85032.png#pic_center\",alt:\"\"}}),t._v(\"​\"),a(\"br\"),t._v(\"\\n输出尺寸计算公式：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/1c5cbf048dcd0d5d99642dbd5d061584.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/e42025f971f3ed1d5a402d72385d7c90.png#pic_center\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"​其中，h,w 为原图的高和宽，k 是卷积核的尺寸，s 是步长。\")]),t._v(\" \"),a(\"p\",[t._v(\"在 TensorFlow2.0 中，自定义填充过程中，padding 参数的设置格式为：\"),a(\"br\"),t._v(\" \"),a(\"strong\",[t._v(\"padding=[[0，0]，[上，下]，[左，右]，[0，0] ]\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# 例如要在上下左右各填充一个单位，实现如下：\\nlayers.Conv2D(48, kernel_size=3, strides=1, padding=[[0,0], [1,1], [1,1], [0,0]])\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"_2-池化层\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-池化层\"}},[t._v(\"#\")]),t._v(\" 2. 池化层\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"池化作用如下 “\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"使卷积神经网络抽取特征是保证特征局部不变性。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"池化操作能降低维度，减少参数数量。\")])])]),t._v(\" \"),a(\"p\",[t._v(\"3.. 池化操作优化比较简单。\")])]),t._v(\" \"),a(\"p\",[t._v(\"在卷积层中，可以通过调节步长参数 s 实现特征图的高宽成倍缩小，从而降低了网络的参数量。实际上，除了通过设置步长，还有一种专门的网络层可以实现尺寸缩减功能，它就是我们要介绍的池化层 (Pooling layer)。\")]),t._v(\" \"),a(\"p\",[t._v(\"池化层同样基于局部相关性的思想，通过从局部相关的一组元素中进行采样或信息聚合，从而得到新的元素值。通常我们用到两种池化进行下采样：\"),a(\"br\"),t._v(\" \"),a(\"strong\",[t._v(\"（1）最大池化 (Max Pooling)\")]),t._v(\"，从局部相关元素集中选取最大的一个元素值。\"),a(\"br\"),t._v(\" \"),a(\"strong\",[t._v(\"（2）平均池化 (Average Pooling)\")]),t._v(\"，从局部相关元素集中计算平均值并返回。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3-激活函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-激活函数\"}},[t._v(\"#\")]),t._v(\" 3. 激活函数\")]),t._v(\" \"),a(\"p\",[t._v(\"激活函数也是神经网络不可缺少的部分，激活函数是用来加入非线性因素，提高网络表达能力，卷积神经网络中最常用的是 ReLU，Sigmoid 使用较少。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/386440db5d71a1a94dd274b52b878b9c.png\",alt:\"\"}}),t._v(\"具体如何选择合适的激活函数。可参考这篇博文：\"),a(\"a\",{attrs:{href:\"https://blog.csdn.net/wjinjie/article/details/104729911\",title:\"神经网络搭建：激活函数总结\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"神经网络搭建：激活函数总结\"),a(\"OutboundLink\")],1),t._v(\"  或者上文介绍。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_4-全连接层\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-全连接层\"}},[t._v(\"#\")]),t._v(\" 4. 全连接层\")]),t._v(\" \"),a(\"p\",[t._v(\"全连接层 FC，之所以叫全连接，是因为每个神经元与前后相邻层的每一个神经元都有连接关系。如下图所示，是一个简单的两层全连接网络，输入时特征，输出是预测的结果。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/31b8627a328ae763f25af819487d9647.png#pic_center\",alt:\"\"}}),t._v(\"​\"),a(\"br\"),t._v(\"\\n全连接层的参数量是可以直接计算的，计算公式如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/222bded58622cde5558b38b969f2ec77.png#pic_center\",alt:\"\"}}),t._v(\"​\"),a(\"br\"),t._v(\"\\n按照上图搭建的两层全连接网络，要训练分辨率仅仅是 28x28=784 的黑白图像，就有近 40 万个待优化的参数。现实生活中高分辨率的彩色图像，像素点更多，且为红绿蓝三通道信息。待优化的参数过多， 容易导致模型过拟合。为避免这种现象，实际应用中一般不会将原始图片直接喂入全连接网络。\"),a(\"br\"),t._v(\"\\n在实际应用中，会先对原始图像进行卷积特征提取，把提取到的特征喂给全连接网络，再让全连接网络计算出分类评估值。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_5-网络参数量与计算量\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-网络参数量与计算量\"}},[t._v(\"#\")]),t._v(\" 5. 网络参数量与计算量\")]),t._v(\" \"),a(\"blockquote\",[a(\"h4\",{attrs:{id:\"卷积层参数-卷积计算量\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#卷积层参数-卷积计算量\"}},[t._v(\"#\")]),t._v(\" 卷积层参数 / 卷积计算量\")]),t._v(\" \"),a(\"p\",[t._v(\"卷积参数 = 卷积核长度 x 卷积核宽度 x 输入通道数 x 输出通道数 + 输出通道数（偏置）\"),a(\"br\"),t._v(\"\\n卷积计算量 = 输出数据大小 x 卷积核的尺度 x 输入通道数\")]),t._v(\" \"),a(\"p\",[t._v(\"例：输入：224x224x3，输出：224x244x64，卷积核：3x3\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"参数量 = 3x3x3x64+64\")]),t._v(\" \"),a(\"li\",[t._v(\"计算量 = 224x224x64x3x3x3\")])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"卷积层：\")])]),t._v(\" \"),a(\"p\",[t._v(\"比如：输入是 32x32x3 的的彩色图片，经过卷积层：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"layers.Conv2D(100, kernel_size=3, strides=1, padding='same')\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[t._v(\"（1）网络参数量\")]),a(\"br\"),t._v(\"\\n主要是\"),a(\"strong\",[t._v(\"卷积核的参数和偏置\")]),t._v(\"的参数： 3x3x3x100+100=2800\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"（2）计算量 FLOPS\")]),a(\"br\"),t._v(\" \"),a(\"a\",{attrs:{href:\"https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0\",title:\"深度学习\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"深度学习\"),a(\"OutboundLink\")],1),t._v(\"框架 FLOPs 的概念：Floating point operations，即浮点运算数量。\"),a(\"br\"),t._v(\"\\n{32x32x[3x3+(3x3-1)]x3+32x32x(3-1)}x100\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"全连接层：\")])]),t._v(\" \"),a(\"p\",[t._v(\"比如第一层节点数是 5，第二层节点数是 10，求网络参数量和计算量 FLOPS\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"（1）网络参数量\")]),a(\"br\"),t._v(\"\\n网络参数量主要来源\"),a(\"strong\",[t._v(\"神经元连接权重和偏置\")]),t._v(\"：5x10+10=60\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"（2）计算量 FLOPS\")]),a(\"br\"),t._v(\"\\n5x10+10=60\"),a(\"br\"),t._v(\"\\n2015 年，Google 研究人员 Sergey 等基于参数标准化设计了 \"),a(\"strong\",[t._v(\"BN 层\")]),t._v(\"。BN 层提出后，广泛地应用在各种深度网络模型上，使得网络的超参数的设定更加自由，同时网络的收敛速度更快，性能也更好。\"),a(\"br\"),t._v(\"\\n详细了解请看：\"),a(\"a\",{attrs:{href:\"https://blog.csdn.net/wjinjie/article/details/105028870\",title:\"神经网络搭建：BN层\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"神经网络搭建：BN 层\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_6-卷积神经网络训练\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-卷积神经网络训练\"}},[t._v(\"#\")]),t._v(\" 6. 卷积神经网络训练：\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"训练基本流程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#训练基本流程\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"训练基本流程：\")])]),t._v(\" \"),a(\"p\",[t._v(\"Step 1：用随机数初始化所有的卷积核和参数 / 权重\")]),t._v(\" \"),a(\"p\",[t._v(\"Step 2：将训练图片作为输入，执行前向步骤 (卷积， ReLU，池化以及全连接层的\"),a(\"strong\",[t._v(\"前向传播\")]),t._v(\") 并计算每个类别的对应输出概率。\")]),t._v(\" \"),a(\"p\",[t._v(\"Step 3：计算输出层的总误差\")]),t._v(\" \"),a(\"p\",[t._v(\"Step 4：\"),a(\"strong\",[t._v(\"反向传播算法\")]),t._v(\"计算误差相对于所有权重的梯度，并用梯度下降法\"),a(\"strong\",[t._v(\"更新所有的卷积核和参数 / 权重的值\")]),t._v(\"，以使输出误差最小化\")]),t._v(\" \"),a(\"p\",[t._v(\"注：卷积核个数、卷积核尺寸、网络架构这些参数，是在 Step 1 之前就已经固定的，且不会在训练过程中改变——\"),a(\"strong\",[t._v(\"只有卷积核矩阵和神经元权重会更新\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/122f83c66096266ece192eff126936f9.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"和多层神经网络一样，卷积神经网络中的参数训练也是使用\"),a(\"strong\",[t._v(\"误差反向传播算法\")]),t._v(\"，关于池化层的训练，需要再提一下，是将池化层改为多层神经网络的形式\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/075f8e9f17b41b3d7ed34ebd1a6213c6.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/477802b6a4cfe405f6573112517b3db1.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"将卷积层也改为多层神经网络的形式\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/1ad85e582c2ffb5ea5d49e5e4e591269.png\",alt:\"\"}})]),t._v(\" \"),a(\"h4\",{attrs:{id:\"cnn-详细求解\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cnn-详细求解\"}},[t._v(\"#\")]),t._v(\" CNN 详细求解：\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"CNN 在本质上是一种输入到输出的映射，它能够学习大量的输入与输出之间的映射关系，而不需要任何输入和输出之间的精确的数学表达式，只要用已知的模式对卷积网络加以训练，网络就具有输入输出对之间的映射能力。\")])]),t._v(\" \"),a(\"p\",[t._v(\"卷积网络执行的是监督训练，所以其样本集是由形如：（输入向量，理想输出向量）的向量对构成的。所有这些向量对，都应该是来源于网络即将模拟系统的实际 “运行” 结构，它们可以是从实际运行系统中采集来。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"1）参数初始化：\")])]),t._v(\" \"),a(\"p\",[t._v(\"在开始训练前，所有的权都应该用一些不同的随机数进行初始化。“小随机数” 用来保证网络不会因权值过大而进入饱和状态，从而导致训练失败；“不同” 用来保证网络可以正常地学习。实际上，如果用相同的数去初始化权矩阵，则网络无学习能力。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"2）训练过程包括四步\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"① 第一阶段：前向传播阶段\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"从样本集中取一个样本，输入网络\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"计算相应的实际输出；在此阶段信息从输入层经过逐级的变换，传送到输出层，这个过程也是网络在完成训练之后正常执行时执行的过程\")])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"② 第二阶段：后向传播阶段\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"计算实际输出与相应的理想输出的差\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"按照极小化误差的方法\"),a(\"strong\",[t._v(\"调整权值矩阵\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"网络的训练过程如下：\")])])])]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"选定训练组，从样本集中分别随机地寻求 N 个样本作为训练组；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"将各权值、阈值，置成小的接近于 0 的随机值，并初始化精度控制参数和学习率；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"从训练组中取一个输入模式加到网络，并给出它的目标输出向量；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"计算出中间层输出向量，计算出网络的实际输出向量；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"将输出向量中的元素与目标向量中的元素进行比较，计算出输出误差；对于中间层的隐单元也需要计算出误差；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"依次计算出各权值的调整量和阈值的调整量；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"调整权值和调整阈值；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"当经历 M 后，判断指标是否满足精度要求，如果不满足，则返回 (3)，继续迭代；如果满足就进入下一步；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"训练结束，将权值和阈值保存在文件中。这时可以认为各个权值已经达到稳定，分类器已经形成。再一次进行训练，直接从文件导出权值和阈值进行训练，不需要进行初始化。\")])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"八、经典网络介绍\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#八、经典网络介绍\"}},[t._v(\"#\")]),t._v(\" 八、经典网络介绍：\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"-3\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#-3\"}},[t._v(\"#\")]),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/7fe04144f9d6832f4909b3bd12f7be9d.png\",alt:\"\"}})]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"LeNet-5\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/d8077ec05cb3b29cccb067374a2b98a1.png\",alt:\"\"}}),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/290102fff19c44f4c7e8cb9679702e14.png\",alt:\"\"}}),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/84cc77601ef9b22160366f2cf1023966.png\",alt:\"\"}})]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"神经元个数 = 卷积核数量 X 输出特征图宽度 X 输出特征图高度\"),a(\"br\"),t._v(\"\\n卷积层可训练参数数量 = 卷积核数量 X（卷积核宽度 X 卷积核高度 + 1）（1 表示偏置）\"),a(\"br\"),t._v(\"\\n汇聚层可训练参数数量 = 卷积核数量 X（1+1）（两个 1 分别表示相加后的系数和偏置，有的汇聚层无参数）\"),a(\"br\"),t._v(\"\\n连接数 = 卷积核数量 X（卷积核宽度 X 卷积核高度 + 1）X 输出特征图宽度 X 输出特征图高度（1 表示偏置）\"),a(\"br\"),t._v(\"\\n全连接层连接数 = 卷积核数量 X（输入特征图数量 X 卷积核宽度 X 卷积核高度 + 1）（输出特征图尺寸为 1X1）\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"AlexNet\")])])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/e5744ab1b60301e65fbb8131005ce7fc.png\",alt:\"\"}}),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/39375402da86ff9bff1d8bee63ae59e0.png\",alt:\"\"}}),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/af7d77f08b59179d1aeee17b12e9535f.png\",alt:\"\"}})]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"Inception 网络\")])])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/d97f6f40936dcafc68ccd791a2e08a86.png\",alt:\"\"}}),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/83f69afdacc9a48d3df7199d90ffc604.png\",alt:\"\"}}),a(\"br\"),t._v(\" \"),a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/0652fe36d703075789d12bf558316ca7.png\",alt:\"\"}})]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"残差网络\")])]),t._v(\" \"),a(\"li\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/e8616f0d4e25030e66dd3c3bd3e7c29b.png\",alt:\"\"}})])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"详细网络介绍可参考这篇\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#详细网络介绍可参考这篇\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"详细网络介绍可参考这篇:\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"卷积神经网络超详细介绍-呆呆的猫的博客-csdn-博客-卷积神经网络\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#卷积神经网络超详细介绍-呆呆的猫的博客-csdn-博客-卷积神经网络\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://blog.csdn.net/jiaoyangwm/article/details/80011656\",title:\"卷积神经网络超详细介绍_呆呆的猫的博客-CSDN博客_卷积神经网络\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"卷积神经网络超详细介绍_呆呆的猫的博客 - CSDN 博客_卷积神经网络\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h3\",{attrs:{id:\"cnn-总结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cnn-总结\"}},[t._v(\"#\")]),t._v(\" CNN 总结\")]),t._v(\" \"),a(\"p\",[t._v(\"本文学习参考资料：\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/qq_36816848/article/details/121576741\",title:\"水很深的深度学习-Task04卷积神经网络CNN_GoAl的博客-CSDN博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"水很深的深度学习 - Task04 卷积神经网络 CNN_GoAl 的博客 - CSDN 博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"CNN 的价值：\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"能够将大数据量的图片有效的降维成小数据量 (并不影响结果)\")]),t._v(\" \"),a(\"li\",[t._v(\"能够保留图片的特征，类似人类的视觉原理\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"CNN 的基本原理：\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"卷积层 – 主要作用是保留图片的特征\")]),t._v(\" \"),a(\"li\",[t._v(\"池化层 – 主要作用是把数据降维，可以有效的避免过拟合\")]),t._v(\" \"),a(\"li\",[t._v(\"全连接层 – 根据不同任务输出我们想要的结果\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"CNN 的实际应用：\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"图片分类、检索\")]),t._v(\" \"),a(\"li\",[t._v(\"目标定位检测\")]),t._v(\" \"),a(\"li\",[t._v(\"目标分割\")]),t._v(\" \"),a(\"li\",[t._v(\"人脸识别\")]),t._v(\" \"),a(\"li\",[t._v(\"骨骼识别\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"九、rnn-循环神经网络\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#九、rnn-循环神经网络\"}},[t._v(\"#\")]),t._v(\" 九、RNN 循环神经网络\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/173578e273fd3a78f17fe6d9a2470465.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/c0d9805476a2d64fd5cf9a6e65ad93b3.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/e72bcfc9271ddc149c352b2aaa311ae1.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/14947360ef7c6ec22209b0b4bef1a595.png\",alt:\"\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"rnn-的基本原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rnn-的基本原理\"}},[t._v(\"#\")]),t._v(\" RNN 的基本原理\")]),t._v(\" \"),a(\"p\",[t._v(\"传统神经网络的结构比较简单：输入层 – 隐藏层 – 输出层。如下图所示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/357b4931a0e9c490bfe94c9aa11e44e9.png\",alt:\"\"}}),t._v(\"​\")]),t._v(\" \"),a(\"p\",[t._v(\"RNN 跟传统神经网络最大的区别在于每次都会将前一次的输出结果，带到下一次的隐藏层中，一起训练。如下图所示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/7816496e0039bd30661b918c74ddaede.gif\",alt:\"\"}}),t._v(\"​\")]),t._v(\" \"),a(\"p\",[t._v(\"RNN 学习资料参考：\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://my.oschina.net/u/876354/blog/1621839\",title:\"大话循环神经网络（RNN）\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"大话循环神经网络（RNN）\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h2\",{attrs:{id:\"十、lstm-长短期记忆神经网络\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#十、lstm-长短期记忆神经网络\"}},[t._v(\"#\")]),t._v(\" 十、LSTM 长短期记忆神经网络\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-lstm-的产生原因\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-lstm-的产生原因\"}},[t._v(\"#\")]),t._v(\" 1 LSTM 的产生原因\")]),t._v(\" \"),a(\"p\",[t._v(\"RNN 在处理长期依赖（时间序列上距离较远的节点）时会遇到巨大的困难，因为计算距离较远的节点之间的联系时会涉及雅可比矩阵的多次相乘，会造成梯度消失或者梯度膨胀的现象。其中最成功应用最广泛的就是门限 RNN（Gated RNN），而 LSTM 就是门限 RNN 中最著名的一种。有漏单元通过设计连接间的权重系数，从而允许 RNN 累积距离较远节点间的长期联系；而门限 RNN 则泛化了这样的思想，允许在不同时刻改变该系数，且允许网络忘记当前已经累积的信息。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-rnn-和-lstm-的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-rnn-和-lstm-的区别\"}},[t._v(\"#\")]),t._v(\" 2 RNN 和 LSTM 的区别\")]),t._v(\" \"),a(\"p\",[t._v(\"所有 RNN 都具有一种重复神经网络模块的链式的形式。在标准的 RNN 中，这个重复的模块只有一个非常简单的结构，例如一个 tanh 层，如下图所示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/9b1274b82e9cb79ca258e95ba49566c8.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"LSTM 同样是这样的结构，但是重复的模块拥有一个不同的结构。不同于单一神经网络层，这里是有四个，以一种非常特殊的方式进行交互。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/fee2d7683564d345b4e80c0c622b75cd.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"注：上图图标具体含义如下所示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/cdb70caf271f2ec55dda24c6e7219879.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"上图中，每一条黑线传输着一整个向量，从一个节点的输出到其他节点的输入。粉色的圈代表 pointwise 的操作，诸如向量的和，而黄色的矩阵就是学习到的神经网络层。合在一起的线表示向量的连接，分开的线表示内容被复制，然后分发到不同的位置。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_3-lstm-核心\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-lstm-核心\"}},[t._v(\"#\")]),t._v(\" 3 LSTM 核心\")]),t._v(\" \"),a(\"p\",[t._v(\"LSTM 有通称作为 “门” 的结构来去除或者增加信息到细胞状态的能力。门是一种让信息选择式通过的方法。他们包含一个 sigmoid 神经网络层和一个 pointwise 乘法操作。示意图如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/10673ae76abf8783f878a74e8d9e14cd.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"LSTM 拥有三个门，分别是遗忘门，输入层门和输出层门，来保护和控制细胞状态。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"忘记层门\")])]),t._v(\" \"),a(\"p\",[t._v(\"作用对象：细胞状态 。\")]),t._v(\" \"),a(\"p\",[t._v(\"作用：将细胞状态中的信息选择性的遗忘。\")]),t._v(\" \"),a(\"p\",[t._v(\"操作步骤：该门会读取 ht−1​​和 xt​​，输出一个在 0 到 1 之间的数值给每个在细胞状态 Ct−1​​中的数字。1 表示 “完全保留”，0 表示 “完全舍弃”。示意图如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/4a9c7cf3bbb34b7d78069561997794e3.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"输入层门\")])]),t._v(\" \"),a(\"p\",[t._v(\"作用对象：细胞状态\")]),t._v(\" \"),a(\"p\",[t._v(\"作用：将新的信息选择性的记录到细胞状态中。\")]),t._v(\" \"),a(\"p\",[t._v(\"操作步骤：\")]),t._v(\" \"),a(\"p\",[t._v(\"步骤一，sigmoid 层称 “输入门层” 决定什么值我们将要更新。\")]),t._v(\" \"),a(\"p\",[t._v(\"步骤二，tanh 层创建一个新的候选值向量 C~t​​加入到状态中。其示意图如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/495ed83abce92126da9539837b467099.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"步骤三：将 ct−1​​更新为 ct​​。将旧状态与 ft​​相乘，丢弃掉我们确定需要丢弃的信息。接着加上 it​∗C~t​​得到新的候选值，根据我们决定更新每个状态的程度进行变化。其示意图如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/833e0c10bacdec8c0b52f84b7c492a16.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"输出层门\")])]),t._v(\" \"),a(\"p\",[t._v(\"作用对象：隐层 ht​​\")]),t._v(\" \"),a(\"p\",[t._v(\"作用：确定输出什么值。\")]),t._v(\" \"),a(\"p\",[t._v(\"操作步骤：\")]),t._v(\" \"),a(\"p\",[t._v(\"步骤一：通过 sigmoid 层来确定细胞状态的哪个部分将输出。\")]),t._v(\" \"),a(\"p\",[t._v(\"步骤二：把细胞状态通过 tanh 进行处理，并将它和 sigmoid 门的输出相乘，最终我们仅仅会输出我们确定输出的那部分。\")]),t._v(\" \"),a(\"p\",[t._v(\"其示意图如下所示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/fabcb914a173e7db4f05e73c6c8efd05.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/5724119711bd6782fe370836ddc9902d.png\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"LSTM 和 GRU 学习参考我的这篇文章：https://blog.csdn.net/qq_36816848/article/details/121616301\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://i-blog.csdnimg.cn/blog_migrate/f68edc2c93dfcfe8cca21c418fcd0062.png\",alt:\"\"}})]),t._v(\" \"),a(\"hr\"),t._v(\" \"),a(\"h3\",{attrs:{id:\"面试总结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面试总结\"}},[t._v(\"#\")]),t._v(\" 面试总结：\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"算法岗面试相关\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算法岗面试相关\"}},[t._v(\"#\")]),t._v(\" 算法岗面试相关\")]),t._v(\" \"),a(\"ol\",{attrs:{start:\"0\"}},[a(\"li\",[t._v(\"算法岗工作总结 https://zhuanlan.zhihu.com/p/95922161\")]),t._v(\" \"),a(\"li\",[t._v(\"人工智能实战面试学习路线图  https://github.com/tangyudi/Ai-Learn\")]),t._v(\" \"),a(\"li\",[t._v(\"百面机器学习之模型评估 https://zhuanlan.zhihu.com/p/78603645\")]),t._v(\" \"),a(\"li\",[t._v(\"面向机器学习的特征工程 https://github.com/HadXu/feature-engineering-for-ml-zh\")]),t._v(\" \"),a(\"li\",[t._v(\"深度学习 500 问  https://github.com/scutan90/DeepLearning-500-questions\")]),t._v(\" \"),a(\"li\",[t._v(\"深度学习无限问  https://github.com/yoyoyo-yo/DeepLearningMugenKnock\")]),t._v(\" \"),a(\"li\",[t._v(\"计算机视觉知识点总结 https://zhuanlan.zhihu.com/p/58776542\")]),t._v(\" \"),a(\"li\",[t._v(\"深度学习 CV 领域最瞩目的成果  https://zhuanlan.zhihu.com/p/315605746\")]),t._v(\" \"),a(\"li\",[t._v(\"算法工程师技术路线图  https://zhuanlan.zhihu.com/p/192633890?utm_source=wechatTimeline_article_bottom&from=timeline\")])]),t._v(\" \"),a(\"p\",[t._v(\"**反向面试：**https://github.com/yifeikong/reverse-interview-zh 技术面试最后反问面试官的话\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"相关资料推荐\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#相关资料推荐\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"相关资料推荐：\")])]),t._v(\" \"),a(\"ol\",{attrs:{start:\"0\"}},[a(\"li\",[t._v(\"算法岗工作总结 https://zhuanlan.zhihu.com/p/95922161\")]),t._v(\" \"),a(\"li\",[t._v(\"人工智能实战面试学习路线图  https://github.com/tangyudi/Ai-Learn\")]),t._v(\" \"),a(\"li\",[t._v(\"百面机器学习之模型评估 https://zhuanlan.zhihu.com/p/78603645\")]),t._v(\" \"),a(\"li\",[t._v(\"面向机器学习的特征工程 https://github.com/HadXu/feature-engineering-for-ml-zh\")]),t._v(\" \"),a(\"li\",[t._v(\"深度学习 500 问  https://github.com/scutan90/DeepLearning-500-questions\")]),t._v(\" \"),a(\"li\",[t._v(\"深度学习无限问  https://github.com/yoyoyo-yo/DeepLearningMugenKnock\")]),t._v(\" \"),a(\"li\",[t._v(\"计算机视觉知识点总结 https://zhuanlan.zhihu.com/p/58776542\")]),t._v(\" \"),a(\"li\",[t._v(\"深度学习 CV 领域最瞩目的成果  https://zhuanlan.zhihu.com/p/315605746\")]),t._v(\" \"),a(\"li\",[t._v(\"算法工程师技术路线图  https://zhuanlan.zhihu.com/p/192633890?utm_source=wechatTimeline_article_bottom&from=timeline\")])]),t._v(\" \"),a(\"blockquote\",[a(\"h4\",{attrs:{id:\"本文参考资料\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#本文参考资料\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"本文参考资料：\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://blog.csdn.net/wuzhongqiang/article/details/89702268\",title:\"​​​​​吴恩达老师深度学习课程笔记\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"​​​​​吴恩达老师深度学习课程笔记\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"http://zh.d2l.ai/chapter_convolutional-neural-networks/index.html\",title:\"卷积神经网络 — 动手学深度学习 2.0.0\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"卷积神经网络 — 动手学深度学习 2.0.0\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://ai-wx.blog.csdn.net/article/details/105016766\",title:\"不积跬步，无以至千里！-CSDN博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"不积跬步，无以至千里！-CSDN 博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://wanghao.blog.csdn.net/article/details/119604015\",title:\"五万字总结,深度学习基础。_AI浩-CSDN博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"五万字总结, 深度学习基础。_AI 浩 - CSDN 博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://tefuirnever.blog.csdn.net/article/details/104338306\",title:\"深度学习入门笔记- 我是管小亮CSDN博客\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"深度学习入门笔记 - 我是管小亮 CSDN 博客\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h4\",{attrs:{id:\"以上未完待更新-仅供个人学习-侵权联系删除\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#以上未完待更新-仅供个人学习-侵权联系删除\"}},[t._v(\"#\")]),t._v(\" 以上未完待更新，仅供个人学习, 侵权联系删除！\")])])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}