{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{397:function(s,n,t){\"use strict\";t.r(n);var a=t(4),e=Object(a.a)({},(function(){var s=this,n=s._self._c;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[n(\"h2\",{attrs:{id:\"多线程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多线程\"}},[s._v(\"#\")]),s._v(\" 多线程\")]),s._v(\" \"),n(\"h3\",{attrs:{id:\"名词释义\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#名词释义\"}},[s._v(\"#\")]),s._v(\" 名词释义\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[n(\"strong\",[s._v(\"程序\")]),s._v(\"：为完成特定任务，用多种语言编写的一组指令的集合，即指一段静态的代码，静态对象\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"进程\")]),s._v(\"：程序的一次执行过程，或是正在运行的一个程序，是一个动态的过程\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"线程\")]),s._v(\"：进程可进一步细化为线程，是一个程序内部的一条执行路径，同时它也是程序使用 CPU 的最基本单位（进程中要同时干几件事情，每一件事情的执行路径就是线程）\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"并行\")]),s._v(\"：多个 CPU 同时执行多个任务，可理解为多个人同时做不同的事\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"并发\")]),s._v(\"：一个 CPU 同时执行多个任务，可理解为多个人做同一件事\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"单线程\")]),s._v(\"：一个进程只用一条执行路径\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"多线程\")]),s._v(\"：一个进程有多条执行路径\")])]),s._v(\" \"),n(\"p\",[s._v(\"注：\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"线程是依赖于进程而存在的，只有运行的程序才会出现进程\")]),s._v(\" \"),n(\"li\",[s._v(\"多进程的意义在于提高 CPU 的使用率\")]),s._v(\" \"),n(\"li\",[s._v(\"多线程的意义在于提高程序的处理效率\")]),s._v(\" \"),n(\"li\",[s._v(\"不同的进程内存独立不共享\")]),s._v(\" \"),n(\"li\",[s._v(\"在内存当中多个线程共享堆内存和方法区内存，而每一个线程都有自己的栈内存，栈内存不共享，一个线程一个栈\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"Java 程序运行原理\")]),s._v(\"：Java 命令会启动 JVM，JVM 可看作是一个应用程序，等同于启动了一个应用程序，也就是启动了一个进程，该进程会自动启动一个主线程，然后主线程会调用某个类的 main 方法，所以 main 方法运行在主线程中，然后再启动垃圾回收线程用来看护主线程，JVM 至少启动了这两个线程，所以 JVM 是多线程的\")])]),s._v(\" \"),n(\"h3\",{attrs:{id:\"多线程实现\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多线程实现\"}},[s._v(\"#\")]),s._v(\" 多线程实现\")]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"方式一\")]),s._v(\"：编写一个类，直接继承 Thread 类并重写 run() 方法\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public class lianxi_02\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t//创建线程对象\\n\\t\\tMyThread mt = new MyThread();\\n\\t\\t\\n\\t\\tmt.start();//启动线程\\n\\t}\\n}\\n\\n//自定义类继承Thread类\\nclass MyThread extends Thread\\n{\\n\\t//在自定义类中重写run()方法\\n\\tpublic void run()\\n\\t{\\n\\t\\t//被线程执行的代码\\n\\t\\t...\\n\\t}\\n}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"在继承 Thread 类的类中只有 run() 方法中的代码才会被线程执行\")]),s._v(\" \"),n(\"li\",[s._v(\"直接调用 run() 方法就是普通方法调用\")]),s._v(\" \"),n(\"li\",[s._v(\"start() 方法的作用：启动一个分支线程，在 JVM 中开辟一个新的栈空间，只要新的栈空间开出来了，start() 方法就结束了，启动成功的线程会自动调用 run() 方法，并且 run() 方法在分支栈的栈底部（压栈），这时 main() 方法在主栈的底部，所以 run() 方法与 main() 方法是平级的\")])]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"方式二\")]),s._v(\"：编写一个类，实现 Runnable 接口并重写 run() 方法\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public class lianxi_02\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t//创建线程对象\\n\\t\\tMyThread mt = new MyThread();\\n\\t\\t\\n\\t\\t//通过线程对象创建Thread对象\\n\\t\\tThread t = new Thread(mt);\\n\\t\\t\\n\\t\\tt.start();//启动线程\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\\n\\n//自定义类实现Runnable接口\\nclass MyThread implements Runnable\\n{\\n\\t//在自定义类中重写run()方法\\n\\tpublic void run()\\n\\t{\\n\\t\\t//被线程执行的代码\\n\\t\\t\\n\\t}\\n}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\")])]),n(\"p\",[n(\"strong\",[s._v(\"在上述两种方式中方式二较为常用，因为方式二避免了 Java 单继承带来的局限性，适合多个相同程序的代码去处理同一个资源的情况，把线程同程序的代码、数据有效分离，较好的体现了面向对象的设计思想（低耦合、高内聚）\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"1、返回当前正在执行的线程对象\\npublic static Thread currentThread();\\n\\n2、获取线程对象的名字\\npublic final String getName();\\n\\n3、更改线程对象的名字\\npublic final void setName(String name);\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\")])]),n(\"p\",[n(\"strong\",[s._v(\"方式三\")]),s._v(\"：实现 Callable 接口（JDK8 新特性）\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('import java.util.concurrent.Callable;\\nimport java.util.concurrent.ExecutionException;\\nimport java.util.concurrent.FutureTask;\\n\\n/**\\n * 实现线程的第三种方式：实现Callable接口\\n * \\n * 这种方式的优点是：可以获取到线程的执行结果\\n * 这种方式的缺点是：在获取线程结果时容易引起当前线程阻塞，效率较低\\n */\\npublic class Lianxi_02\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tMyThread1 mt = new MyThread1();\\n\\t\\t\\n\\t\\t//创建一个“未来类”对象\\n\\t\\tFutureTask task = new FutureTask(mt);\\n\\t\\t\\n\\t\\t//创建线程对象\\n\\t\\tThread t = new Thread(task);\\n\\t\\t\\n\\t\\tt.start();\\n\\t\\t\\n\\t\\t\\n\\t\\ttry{\\n\\t\\t\\t\\n\\t\\t\\t//通过get()方法获取线程返回值\\n\\t\\t\\tSystem.out.println(task.get());\\n\\t\\t} catch (InterruptedException e){\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} catch (ExecutionException e){\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\t\\n\\t\\t//get()方法会导致当前线程阻塞，所以此方法效率比较低\\n\\t\\t//因为get()方法需要等线程结束后拿到线程返回值\\n\\t\\t//所以main()方法这里的代码需要等get()方法结束才能执行，也就是要等以上线程结束后才执行\\n\\t\\tSystem.out.println(\"结束了\");\\n\\t}\\n}\\n\\n//实现Callable接口\\nclass MyThread1 implements Callable<String>\\n{\\n\\t\\n\\t//这里的call()方法就相当于run()方法\\n\\tpublic String call() throws Exception\\n\\t{\\n\\t\\tString str = \"hhhh\";\\n\\t\\tThread.sleep(5000);\\n\\t\\tSystem.out.println(\"2222\");\\n\\t\\tThread.sleep(5000);\\n\\t\\tSystem.out.println(\"3333\");\\n\\t\\treturn str;\\n\\t}\\n\\t\\n}\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"34\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"35\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"36\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"37\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"38\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"39\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"40\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"41\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"42\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"43\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"44\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"45\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"46\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"47\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"48\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"49\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"50\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"51\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"52\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"53\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"54\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"55\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"56\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"57\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"58\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"线程的生命周期\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程的生命周期\"}},[s._v(\"#\")]),s._v(\" 线程的生命周期\")]),s._v(\" \"),n(\"p\",[s._v(\"线程的生命周期总共有五个状态：\")]),s._v(\" \"),n(\"ol\",[n(\"li\",[s._v(\"新建\")]),s._v(\" \"),n(\"li\",[s._v(\"就绪\")]),s._v(\" \"),n(\"li\",[s._v(\"运行\")]),s._v(\" \"),n(\"li\",[s._v(\"阻塞\")]),s._v(\" \"),n(\"li\",[s._v(\"死亡\")])]),s._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://img-blog.csdnimg.cn/20210119192358603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU2MzIwMQ==,size_16,color_FFFFFF,t_70\",alt:\"\"}})]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"让当前线程进入休眠，进入 “阻塞状态”，放弃 CPU 时间片，让给其它线程使用，跟调用的对象无关，因为是静态只跟出现的位置有关，出现在哪个线程中，就使哪个线程睡眠（\"),n(\"em\",[s._v(\"注：静态方法看位置，实例方法就看对象\")]),s._v(\"）\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public static void sleep(long millis);\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"该方法会让当前线程出异常，从而达到中断线程的效果，可用它来唤醒睡眠的线程\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public void interrupt();\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"让位方法，暂停当前正在执行的线程对象，并执行其他线程，注意：yield()方法不是阻塞方法，它是让线程从 “运行状态” 回到“就绪状态”，回到就绪状态的线程有可能再次抢到 CPU 时间片，所以有时让位效果不明显\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public static void yield();\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"合理地终止（结束）一个线程的执行\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('public class ThreadTest\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tMyThread2 mt = new MyThread2();\\n\\t\\tThread th = new Thread(mt);\\n\\n\\t\\tth.start();\\n\\t\\t\\n\\t\\t//过5秒后\\n\\t\\ttry{\\n\\t\\t\\tThread.sleep(5000);\\n\\t\\t} catch (InterruptedException e){\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\tmt.run = false;//改变run属性，通过run的值来控制线程执行\\n\\t\\tSystem.out.println(\"终止成功\");\\n\\t}\\n}\\n\\nclass MyThread2 implements Runnable\\n{\\n\\t// 打一个布尔标记\\n\\tboolean run = true;\\n\\n\\tpublic void run()\\n\\t{\\n\\n\\t\\tfor (int i = 0; i < 10; i++)\\n\\t\\t{\\n\\t\\t\\tif (run)\\n\\t\\t\\t{\\n\\t\\t\\t\\tSystem.out.println(Thread.currentThread().getName() + \"----\\x3e\" + i);\\n\\t\\t\\t\\ttry{\\n\\t\\t\\t\\t\\tThread.sleep(1000);\\n\\t\\t\\t\\t} catch (InterruptedException e){\\n\\t\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else//如果run属性为false就结束run()方法,意味着线程结束了\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t}\\n}\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"34\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"35\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"36\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"37\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"38\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"39\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"40\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"41\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"42\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"43\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"44\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"45\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"46\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"合并线程\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public final void join();\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\")])]),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('在以下代码，合并线程的作用是：t1线程进入阻塞状态，t2线程执行，直到t2线程结束，t1线程才可以正常执行\\n\\npublic class Lianxi_02\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tThread t1 = new Thread(new Myth1());\\n\\t\\tt1.setName(\"t1\");\\n\\t\\tt1.start();\\n\\t}\\n}\\n\\nclass Myth1 implements Runnable\\n{\\n\\tpublic void run()\\n\\t{\\n\\t\\tThread t2 = new Thread(new Myth2());\\n\\t\\t\\n\\t\\tt2.setName(\"t2\");\\n\\t\\t//启动t2线程\\n\\t\\tt2.start();\\n\\t\\t\\n\\t\\t//合并t2\\n\\t\\ttry{\\n\\t\\t\\tt2.join();//t1进入阻塞，t2执行\\n\\t\\t} catch (InterruptedException e){\\n\\t\\t\\t\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\t\\n\\t\\t//t1的线程代码\\n\\t\\tfor(int i = 0; i < 5; i++)\\n\\t\\t{\\n\\t\\t\\tSystem.out.println(Thread.currentThread().getName() + \"----\\x3e\" + i);\\n\\t\\t}\\n\\t}\\n}\\n\\nclass Myth2 implements Runnable\\n{\\n\\tpublic void run()\\n\\t{\\n\\t\\t//t2的线程代码\\n\\t\\tfor(int i = 0; i < 5; i++)\\n\\t\\t{\\n\\t\\t\\tSystem.out.println(Thread.currentThread().getName() + \"----\\x3e\" + i);\\n\\t\\t}\\n\\t}\\n}\\n\\n执行结果：\\nt2----\\x3e0\\nt2----\\x3e1\\nt2----\\x3e2\\nt2----\\x3e3\\nt2----\\x3e4\\nt1----\\x3e0\\nt1----\\x3e1\\nt1----\\x3e2\\nt1----\\x3e3\\nt1----\\x3e4\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"34\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"35\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"36\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"37\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"38\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"39\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"40\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"41\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"42\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"43\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"44\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"45\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"46\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"47\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"48\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"49\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"50\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"51\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"52\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"53\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"54\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"55\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"56\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"57\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"58\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"59\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"60\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"61\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"线程的优先级\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程的优先级\"}},[s._v(\"#\")]),s._v(\" 线程的优先级\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"线程默认优先级是 5\")]),s._v(\" \"),n(\"li\",[s._v(\"线程最高优先级是 10\")]),s._v(\" \"),n(\"li\",[s._v(\"线程最低优先级是 1\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"1、返回线程对象的优先级\\npublic final int getPriority();\\n\\n2、更改线程的优先级\\npublic final void setPriority(int newPriority);\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\")])]),n(\"p\",[n(\"strong\",[s._v(\"线程优先级高仅仅表示线程获取到 CPU 时间片的概率高\")])]),s._v(\" \"),n(\"h3\",{attrs:{id:\"线程的调度模型\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程的调度模型\"}},[s._v(\"#\")]),s._v(\" 线程的调度模型\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[n(\"strong\",[s._v(\"抢占式调度模型\")]),s._v(\"：优先级越高的线程抢到 CPU 时间片的概率就越大，Java 采用的就是抢占式调度模型\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"均分式调度模型\")]),s._v(\"：平均分配 CPU 时间片，每个线程占有的 CPU 时间片时间长度一样\")])]),s._v(\" \"),n(\"h3\",{attrs:{id:\"线程安全\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程安全\"}},[s._v(\"#\")]),s._v(\" 线程安全\")]),s._v(\" \"),n(\"p\",[s._v(\"判断一个程序是否可能会有线程安全问题：\")]),s._v(\" \"),n(\"ol\",[n(\"li\",[s._v(\"是否是多线程环境\")]),s._v(\" \"),n(\"li\",[s._v(\"是否有共享数据\")]),s._v(\" \"),n(\"li\",[s._v(\"是否有多个线程操作共享数据\")])]),s._v(\" \"),n(\"p\",[s._v(\"可以理解为：\"),n(\"strong\",[s._v(\"当有多个线程同时操作同一数据对象时（线程并发），就容易导致数据状态错误的情况，这时的数据就不安全了\")])]),s._v(\" \"),n(\"p\",[s._v(\"以下代码体现了线程安全问题\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('/**\\n * 线程安全示例：\\n * 多个用户同时从同一个账户中取钱\\n *\\n */\\npublic class Lianxi_02\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t//创建一个账户对象（共享数据）\\n\\t\\tAccount ac = new Account(10000);\\n\\t\\t\\n\\t\\t//创建两个线程对象（多线程环境）\\n\\t\\tThread t1 = new Thread(new User(ac, \"用户1\"));\\n\\t\\tThread t2 = new Thread(new User(ac, \"用户2\"));\\n\\t\\t\\n\\t\\tt1.start();\\n\\t\\tt2.start();\\n\\t}\\n}\\n\\n//账户类\\nclass Account\\n{\\n\\t\\n\\tprivate double money;\\n\\t\\n\\t\\n\\tpublic Account(double money)\\n\\t{\\n\\t\\tthis.money = money;\\n\\t}\\n\\t\\n\\tpublic double getMoney()\\n\\t{\\n\\t\\treturn this.money;\\n\\t}\\n\\t\\n\\tpublic void setMoney(double money)\\n\\t{\\n\\t\\tthis.money = money;\\n\\t}\\n\\t\\n\\t//取款（操作同一账户）\\n\\tpublic void Withdrawal(double money)\\n\\t{\\n\\t\\t//取之前的余额\\n\\t\\tdouble before = this.money;\\n\\t\\t//取之后的余额\\n\\t\\tdouble after = before - money;\\n\\t\\t\\n\\t\\t//这里让线程睡眠1s，就一定会出现线程安全问题\\n\\t\\ttry{\\n\\t\\t\\tThread.sleep(1000);\\n\\t\\t} catch (InterruptedException e){\\n\\t\\t\\t\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t\\t//设置取之后的余额\\n\\t\\tthis.setMoney(after);\\n\\t\\t\\n\\t}\\n\\t\\n\\t\\n}\\n\\n//用户类\\nclass User implements Runnable\\n{\\n\\tprivate Account ac;\\n\\tprivate String name;\\n\\t\\n\\tpublic User(Account ac, String name)\\n\\t{\\n\\t\\tthis.name = name;\\n\\t\\tthis.ac = ac;\\n\\t}\\n\\tpublic void run()\\n\\t{\\n\\t\\tac.Withdrawal(5000);\\n\\t\\tSystem.out.println(this.name + \"已取款完成，余额为\" + ac.getMoney());\\n\\t}\\n}\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"34\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"35\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"36\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"37\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"38\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"39\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"40\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"41\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"42\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"43\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"44\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"45\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"46\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"47\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"48\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"49\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"50\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"51\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"52\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"53\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"54\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"55\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"56\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"57\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"58\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"59\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"60\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"61\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"62\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"63\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"64\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"65\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"66\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"67\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"68\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"69\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"70\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"71\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"72\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"73\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"74\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"75\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"76\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"77\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"78\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"79\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"80\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"81\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"82\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"83\")]),n(\"br\")])]),n(\"p\",[s._v(\"Java 提供了线程同步机制（synchronized）用于解决线程安全问题，其思想是：把多条语句操作共享数据的代码包装成一个整体，让某个线程在执行的时候，其他线程不能执行\")]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"线程同步实际上就是让线程不能并发了，必须排队执行\")])]),s._v(\" \"),n(\"p\",[s._v(\"synchronized 的三种用法：\")]),s._v(\" \"),n(\"ol\",[n(\"li\",[s._v(\"同步代码块（灵活）\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"synchronized(这里填的是想要同步的线程（也就是想要排队的线程）所共享的对象) {\\n\\t//需要同步的代码块（这部分的代码块越少程序执行效率就越高）\\n}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"//取款（操作同一账户）\\npublic void Withdrawal(double money)\\n\\t{\\n\\t\\tsynchronized(this) {//这里的锁对象是账户对象，在这个类中就是this\\n\\t\\t\\t//取之前的余额\\n\\t\\t\\tdouble before = this.getMoney();\\n\\t\\t\\t//取之后的余额\\n\\t\\t\\tdouble after = before - money;\\n\\t\\t\\t\\n\\t\\t\\ttry{\\n\\t\\t\\t\\tThread.sleep(1000);\\n\\t\\t\\t} catch (InterruptedException e){\\n\\t\\t\\t\\t\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//设置取之后的余额\\n\\t\\t\\tthis.setMoney(after);\\n\\t\\t}\\n\\t\\t\\t\\n\\t}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\")])]),n(\"ol\",{attrs:{start:\"2\"}},[n(\"li\",[s._v(\"在实例方法上使用 synchronized，表示共享对象一定是 this，且同步代码块是整个方法体（为了保护实例变量的安全），使用有局限性，但简化了代码\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"//取款（操作同一账户）\\n\\tpublic synchronized void Withdrawal(double money)\\n\\t{\\n\\t\\t\\t//取之前的余额\\n\\t\\t\\tdouble before = this.getMoney();\\n\\t\\t\\t//取之后的余额\\n\\t\\t\\tdouble after = before - money;\\n\\t\\t\\t\\n\\t\\t\\ttry{\\n\\t\\t\\t\\tThread.sleep(1000);\\n\\t\\t\\t} catch (InterruptedException e){\\n\\t\\t\\t\\t\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//设置取之后的余额\\n\\t\\t\\tthis.setMoney(after);\\n\\t\\t\\t\\n\\t}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\")])]),n(\"ol\",{attrs:{start:\"3\"}},[n(\"li\",[s._v(\"在静态方法上使用 synchronized，表示锁对象是类锁（字节码文件对象），类锁永远只有一把（为了保护静态变量的安全）\")])]),s._v(\" \"),n(\"p\",[s._v(\"注：\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"局部变量永远都不会存在线程安全问题，因为局部变量在栈中不共享，一个线程一个栈\")]),s._v(\" \"),n(\"li\",[s._v(\"实例变量在堆内存中，静态变量在方法区内存中，堆内存和方法区内存都是多线程共享的，所以可能存在线程安全问题\")]),s._v(\" \"),n(\"li\",[s._v(\"同步机制虽然可以解决数据安全问题，但其缺点在于当线程相当多时，因为每个线程都会去判断同步上的锁对象，极其耗费资源，无形中会降低程序的运行效率\")])]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"synchronized 在开发中最好不要嵌套使用，可能会导致死锁（指两个或两个以上的线程在执行的过程中，因争夺资源产生的一种相互等待现象）\")]),s._v(\"，\")]),s._v(\" \"),n(\"p\",[s._v(\"以下代码是死锁示例\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public class Lianxi_02\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tObject o1 = new Object();\\n\\t\\tObject o2 = new Object();\\n\\t\\t\\n\\t\\tThread t1 = new Myth1(o1, o2);\\n\\t\\tThread t2 = new Myth2(o1, o2);\\n\\t\\t\\n\\t\\tt1.start();\\n\\t\\tt2.start();\\n\\t}\\n}\\n\\nclass Myth1 extends Thread\\n{\\n\\tprivate Object o1;\\n\\tprivate Object o2;\\n\\t\\n\\tpublic Myth1(Object o1, Object o2)\\n\\t{\\n\\t\\tthis.o1 = o1;\\n\\t\\tthis.o2 = o2;\\n\\t}\\n\\t\\n\\tpublic void run()\\n\\t{\\n\\t\\tsynchronized(o1) {\\n\\t\\t\\ttry{\\n\\t\\t\\t\\tThread.sleep(1000);\\n\\t\\t\\t} catch (InterruptedException e){\\n\\t\\t\\t\\t\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t\\tsynchronized(o2) {\\n\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nclass Myth2 extends Thread\\n{\\n\\tprivate Object o1;\\n\\tprivate Object o2;\\n\\t\\n\\tpublic Myth2(Object o1, Object o2)\\n\\t{\\n\\t\\tthis.o1 = o1;\\n\\t\\tthis.o2 = o2;\\n\\t}\\n\\t\\n\\tpublic void run()\\n\\t{\\n\\t\\tsynchronized(o2) {\\n\\t\\t\\ttry{\\n\\t\\t\\t\\tThread.sleep(1000);\\n\\t\\t\\t} catch (InterruptedException e){\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t\\tsynchronized(o1) {\\n\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"34\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"35\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"36\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"37\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"38\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"39\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"40\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"41\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"42\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"43\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"44\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"45\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"46\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"47\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"48\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"49\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"50\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"51\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"52\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"53\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"54\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"55\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"56\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"57\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"58\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"59\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"60\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"61\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"62\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"63\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"64\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"65\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"66\")]),n(\"br\")])]),n(\"p\",[n(\"strong\",[s._v(\"解决线程安全问题的方案\")]),s._v(\"：\")]),s._v(\" \"),n(\"ol\",[n(\"li\",[s._v(\"尽量使用局部变量代替实例变量和静态变量\")]),s._v(\" \"),n(\"li\",[s._v(\"如果必须是实例变量，那么可以考虑创建多个对象，一个线程一个对象，这样实例变量的内存就不共享了\")]),s._v(\" \"),n(\"li\",[s._v(\"如果不能使用局部变量，对象也不能创建多个，这个时候就只能选择 synchronized 同步机制了\")])]),s._v(\" \"),n(\"h3\",{attrs:{id:\"守护线程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#守护线程\"}},[s._v(\"#\")]),s._v(\" 守护线程\")]),s._v(\" \"),n(\"p\",[s._v(\"Java 语言中线程分为两大类：\")]),s._v(\" \"),n(\"ol\",[n(\"li\",[s._v(\"用户线程（如主线程 main 方法）\")]),s._v(\" \"),n(\"li\",[s._v(\"守护线程（后台线程，如垃圾回收线程）\")])]),s._v(\" \"),n(\"p\",[s._v(\"守护线程的特点：\"),n(\"strong\",[s._v(\"一般的守护线程是一个死循环，所有的用户线程只要结束，守护线程就自动结束\")])]),s._v(\" \"),n(\"p\",[s._v(\"将该线程标记为守护线程或用户线程，当正在运行的线程都是守护线程时，Java 虚拟机退出。\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"java.lang.Thread中的方法\\n\\npublic final void setDaemon(boolean on);//true表示守护线程，false表示用户线程\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"定时器\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定时器\"}},[s._v(\"#\")]),s._v(\" 定时器\")]),s._v(\" \"),n(\"p\",[s._v(\"定时器的作用：间隔特定的时间，执行特定的程序\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('import java.util.Date;\\nimport java.util.Timer;\\nimport java.util.TimerTask;\\n\\npublic class ThreadTest\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t//创建定时器对象\\n\\t\\tTimer ti = new Timer();\\n\\t\\t\\n\\t\\t//创建定时任务对象\\n\\t\\tTimerTask task = new MyThread();\\n\\t\\t\\n\\t\\t//任务第一次执行的时间\\n\\t\\tDate firstTime = new Date();\\n\\t\\t\\n\\t\\t//任务task从时间date开始执行，每隔2000ms执行一次\\n\\t\\tti.schedule(task, firstTime, 2000);\\n\\t\\t\\n\\t}\\n}\\n\\n\\n//定时任务类\\nclass MyThread extends TimerTask\\n{\\n\\t//指定定时任务run()代码块\\n\\tpublic void run()\\n\\t{\\n\\t\\tSystem.out.println(\"hhhh\");\\n\\t}\\n}\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"object-中的-wait-方法和-notify-方法\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#object-中的-wait-方法和-notify-方法\"}},[s._v(\"#\")]),s._v(\" Object 中的 wait 方法和 notify 方法\")]),s._v(\" \"),n(\"p\",[s._v(\"wait() 和 notify() 不是线程对象的方法，是 Java 中任何一个 Java 对象都有的方法，因为这两个方法是 Object 类中自带的\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"wait()：让对象上活动的线程进入等待状态，并释放对象锁\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public final void wait();\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"notify()：唤醒对象上等待的单个线程（若有多个线程等待，则随机选择一个线程唤醒），不释放锁\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public final void notify();\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"notifyAll()：唤醒对象上等待的所有线程，不释放锁\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public final void notifyAll();\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\")])]),n(\"p\",[s._v(\"注：\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[s._v(\"唤醒并不表示线程可以立马执行，还要抢夺 CPU 时间片\")]),s._v(\" \"),n(\"li\",[s._v(\"这些方法都与线程有关，所以一般用在锁对象上，通过锁对象来控制线程\")])]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"sleep() 与 wait() 的区别\")]),s._v(\"：sleep() 只能通过线程对象调用，且必须指定睡眠时间，不释放锁。wait() 方法可以通过任意对象调用，且可指定时间，也可不指定时间，释放锁\")]),s._v(\" \"),n(\"h3\",{attrs:{id:\"获取文件绝对路径\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#获取文件绝对路径\"}},[s._v(\"#\")]),s._v(\" 获取文件绝对路径\")]),s._v(\" \"),n(\"p\",[s._v(\"采用以下的代码可以拿到一个文件的绝对路径，前提是文件必须在当前类路径下（在当前 src 下），这种写法无论在哪个系统上都可获得绝对路径，是通用的\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('String path = Thread.currentThread().getContextClassLoader()\\n.getResource(\"从当前类路径开始的文件路径（相对路径）\").getPath();\\n\\t\\t\\n//Thread.currentThread();表示获取当前线程对象\\n//getContextClassLoader();表示获取当前线程的类加载器对象\\n//getResource();获取资源，当前线程的类加载器默认从类的根路径下加载资源\\n\\n\\n直接返回流\\nInputStream path = Thread.currentThread().getContextClassLoader()\\n.getResourceAsStream(\"从当前类路径开始的文件路径（相对路径）\");\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"资源绑定器\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#资源绑定器\"}},[s._v(\"#\")]),s._v(\" 资源绑定器\")]),s._v(\" \"),n(\"p\",[s._v(\"Java.util 包下提供了一个资源绑定器，便于获取属性配置文件（.properties）中的内容，使用以下方法的前提是配置文件必须在当前类路径下，且此方法只适用于配置文件，注意：\"),n(\"strong\",[s._v(\"在写路径时路径后的扩展名不能写\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('ResourceBundle bundle = ResourceBundle.getBundle(\"db\");//不能写成db.properties\\n\\t\\t\\nString driver = bundle.getString(\"driver\");\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"反射\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射\"}},[s._v(\"#\")]),s._v(\" 反射\")]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"反射就是通过字节码文件对象把 java 类中的各种成分（变量、方法、构造方法）映射成一个个 java 对象，实际上是通过 class 对象反向获取该类的信息，即通过类的字节码文件动态的解析类\")])]),s._v(\" \"),n(\"p\",[s._v(\"获取 Class 对象的三种方式（在运行期间，一个类只有一个 class 对象产生）：\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('方式一：会导致类加载，类加载静态代码块执行\\nClass c = Class.forName(\"带有包名的完整类名\");\\n\\n方式二：会执行静态代码块\\nClass c = 对象.getClass();\\n\\n方式三：java语言中任何一种类型，包括基本数据类型都有.class属性 不会执行静态代码块（不会静态初始化）\\nClass c = 任何类型.class;\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\")])]),n(\"p\",[n(\"strong\",[s._v(\"以下所有方法中若要获取私有成员时就在 Declared 之后调用解除私有限定（安全检查管理器）方法\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"public void setAccessible(boolean flag);\\nflag为true时表示关闭检查，可调用私有\\nflag为false时表示打开检查，不可调用私有\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"p\",[s._v(\"通过 class 对象获取构造方法对象\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"java.lang.reflect.Constructor<T>\\n\\n获取批量的构造方法对象\\npublic Constructor<?>[] getConstructors();//所有公有的构造方法\\npublic Constructor<?>[] getDeclaredConstructors();//获取所有的构造方法（包括私有、受保护、默认、公有）\\n\\n\\n获取单个指定的构造方法对象\\n//Class<?>... parameterTypes表示参数类型的字节码，如String.class、int.class\\n\\npublic Constructor<T> getConstructor(Class<?>... parameterTypes);//获取单个指定的公有构造方法\\npublic Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes);//获取单个指定不限修饰符的构造方法\\n\\n创建新对象\\npublic T newInstance(Object... initargs);//括号里的是填实际参数\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\")])]),n(\"p\",[s._v(\"通过 class 对象获取成员变量对象\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"java.lang.reflect.Field\\n\\n获取批量的成员变量对象\\npublic Field[] getFields();//获取公有的成员变量\\npublic Field[] getDeclaredFields();//获取所有成员变量，包括：私有、受保护、默认、公有\\n\\n通过变量名获取单个指定的成员变量对象\\npublic Field getField(String name);//获取指定公有的成员变量\\npublic Field getDeclaredField(String name);//获取单个指定成员变量、不限修饰符\\n\\n获取变量的值，如果是私有就需要关闭安全检查\\npublic Object get(Object obj);//括号里表示对象,返回该对象的某个变量的值\\n\\n给获取的变量赋值\\npublic void set(Object obj, Object value);//obj表示变量所在的对象，value表示要为变量赋的值\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\")])]),n(\"p\",[s._v(\"通过 class 对象获取成员方法对象\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"java.lang.reflect.Method\\n\\n获取批量的成员方法对象\\npublic Method[] getMethods();//获取公有的成员方法，包含了父类的公有成员方法\\npublic Method[] getDeclaredMethods();//获取所有的成员方法，包含了私有成员方法，不包括继承的\\n\\n获取单个指定成员方法对象\\npublic Method getMethod(String name, Class<?>... parameterTypes);//获取公有的指定成员方法，name是方法名，后面填的是形参类型字节码\\npublic Method getDeclaredMethod(String name, Class<?>... parameterTypes);//获取所有的成员方法\\n\\n调用该成员方法\\npublic Object invoke(Object obj, Object... args);//obj表示要调用方法的对象，args表示调用方法时传递的实际参数\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\")])]),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"获取类的父类对象\\npublic Class<? super T> getSuperclass();\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\")])]),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"获取类实现的所有接口对象\\npublic Class<?>[] getInterfaces();\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\")])]),n(\"p\",[n(\"strong\",[s._v(\"反射的核心是：JVM 在运行时才动态加载类或调用方法 / 访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁\")])]),s._v(\" \"),n(\"h3\",{attrs:{id:\"反射的优点\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射的优点\"}},[s._v(\"#\")]),s._v(\" 反射的优点\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[n(\"p\",[s._v(\"可扩展性特性：应用程序可以通过使用它们的完全限定名称创建可扩展性对象的实例来使用外部的、用户定义的类。\")])]),s._v(\" \"),n(\"li\",[n(\"p\",[s._v(\"类浏览器和可视化开发环境：类浏览器需要能够枚举类的成员。可视化开发环境可以受益于利用反射中可用的类型信息来帮助开发人员编写正确的代码。\")])]),s._v(\" \"),n(\"li\",[n(\"p\",[s._v(\"调试器和测试工具：调试器需要能够检查类的私有成员。测试工具可以利用反射来系统地调用定义在类上的可发现集 API，以确保测试套件中的高水平代码覆盖率。\")])])]),s._v(\" \"),n(\"h3\",{attrs:{id:\"反射的缺点\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射的缺点\"}},[s._v(\"#\")]),s._v(\" 反射的缺点\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[n(\"p\",[s._v(\"性能开销：由于反射涉及动态解析的类型，因此无法执行某些 Java 虚拟机优化。因此，反射操作的性能比非反射操作慢，应避免在对性能敏感的应用程序中频繁调用的代码段中使用。\")])]),s._v(\" \"),n(\"li\",[n(\"p\",[s._v(\"安全问题：反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。\")])]),s._v(\" \"),n(\"li\",[n(\"p\",[s._v(\"内部暴露：由于反射允许代码执行非反射代码中非法的操作，例如访问私有字段和方法，使用反射会导致意想不到的副作用，这可能会使代码功能失调并可能破坏可移植性. 反射代码打破了抽象，因此可能会随着平台的升级而改变行为。\")])])]),s._v(\" \"),n(\"h2\",{attrs:{id:\"注解\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注解\"}},[s._v(\"#\")]),s._v(\" 注解\")]),s._v(\" \"),n(\"p\",[s._v(\"Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。\")]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"注解 Annotation 是一种引用数据类型，编译后生成. class 文件\")])]),s._v(\" \"),n(\"p\",[s._v(\"注解定义语法\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"[修饰符列表] @interface 注解类型名{\\n\\t\\n}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"p\",[s._v(\"注解使用语法\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"@ 注解类型名\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"@Override 这个注解只能注解方法，这个注解是给编译器参考的，和运行阶段没有关系，凡是 java 中的方法带有这个注解的，编译器都会进行编译检查，如果这个方法不是重写父类的方法，编译器就会报错\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"用来标注 “注解类型” 的注解称为元注解\")])]),s._v(\" \"),n(\"li\",[s._v(\"@Target 注解是一个元注解，用来标注 “被标注的注解” 可以出现在哪些位置上\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"@Target(ElementType.METHOD)//被标注的元素只能出现在方法上\\n@Target(ElementType.ANNOTATION_TYPE)//被标注的元素只能出现在注解类型上\\n@Target(ElementType.TYPE)//被标注的元素只能出现在类上\\n@Target(ElementType.FIELD)//被标注的元素只能出现在字段上\\n@Target(ElementType.PARAMETER)//被标注的元素只能出现在参数上\\n@Target(ElementType.CONSTRUCTOR)//被标注的元素只能出现在构造方法上\\n@Target(ElementType.LOCAL_VARIABLE)//被标注的元素只能出现在局部变量上\\n@Target(ElementType.PACKAGE)//被标注的元素只能出现在包上\\n@Target(ElementType. MODULE)//被标注的元素只能出现在模块上\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"@Retention 注解是一个元注解，用来标注 “被标注的注解” 最终保存在哪里\")])]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"@Retention(RetentionPolicy.SOURCE)//被标注的元素只被保存在java源文件中\\n@Retention(RetentionPolicy.CLASS)//被标注的元素只被保存在class文件中\\n@Retention(RetentionPolicy.RUNTIME)//被标注的元素只被保存在class文件中，并且可以被反射机制所读取\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"@Deprecated 注解用来标注已过时的元素\")])]),s._v(\" \"),n(\"p\",[s._v(\"注解中定义属性\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('属性类型 属性名();//表示该属性名只能被赋值该属性类型的数据\\n\\npublic @interface MyAnnotation\\n{\\n\\tint value();\\n\\tString name();\\n\\tString address() default \"\";//给address属性赋默认值，在该注解使用时可省略不写\\n}\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"如果一个注解当中有属性，那么在使用该注解时必须给该注解中的属性赋值（除非该属性使用 default 指定默认值就可省略赋值）\")]),s._v(\" \"),n(\"li\",[s._v(\"如果一个注解的属性名为 value 且只有这一个属性或其余属性有默认值时，那么在使用该注解的这个属性时，属性名（value）可以省略不写，但属性值必须要有\")])]),s._v(\" \"),n(\"p\",[s._v(\"注解使用\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v('@ 注解类型名(属性名=属性值, 属性名=属性值......)\\n\\n@MyAnnotation(value = 9, name = \"xxx\", address = \"dddd\")\\nclass Person\\n{\\n\\t@MyAnnotation(value = 9, name = \"xxx\" )//因属性address有默认值可省略\\n\\tpublic void run()\\n\\t{\\n\\t\\t\\n\\t}\\n}\\n')])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\")])]),n(\"ul\",[n(\"li\",[s._v(\"注解当中的属性可以是这些类型：byte、short、int、long、float、double、boolean、char、String、class、枚举以及以上每种类型的数组类型\")]),s._v(\" \"),n(\"li\",[s._v(\"在使用注解中数组型的属性时如果属性值只有一个值，大括号 { } 可省略不写\")])]),s._v(\" \"),n(\"p\",[s._v(\"反射注解\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"判断这个注解是否在此类上\\n//括号里填注解类型的字节码，\\npublic boolean isAnnotationPresent(Class<? extends Annotation> annotationClass);//返回true表示在此类上有此注解，false表示没有\\n\\n获取该注解对象\\npublic <A extends Annotation> A getAnnotation(Class<A> annotationClass);//返回该注解类型，可能需强转\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"面向对象思想设计原则\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向对象思想设计原则\"}},[s._v(\"#\")]),s._v(\" 面向对象思想设计原则\")]),s._v(\" \"),n(\"p\",[n(\"em\",[s._v(\"这些设计原则都是为了提高代码的维护性、扩展性、复用性、低耦合高内聚\")])]),s._v(\" \"),n(\"ul\",[n(\"li\",[n(\"strong\",[s._v(\"单一职责原则\")]),s._v(\"：“高内聚、低耦合”，功能细化，每个类应该只有一个功能，对外只提供一种功能，而引起类变化的原因应该只有一个，所有的设计模式都应该遵循这一原则\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"开闭原则\")]),s._v(\"：“一个对象对扩展开放对修改关闭”，对类的改动是通过增加代码进行的，而不是修改现有代码，借助抽象和多态，把可能变化的内容抽象出来，从而使抽象的部分是相对稳定的，而具体的实现则是可以改变和扩展的\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"里氏替换原则\")]),s._v(\"：“在任何父类出现的地方都可以用它的子类来替代”，同一个继承体系中的对象应该有共同的行为特征\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"依赖注入原则\")]),s._v(\"：“要依赖于抽象，不要依赖于具体实现”，在应用程序中，所有的类如果使用或依赖于其他的类，则应该依赖这些其他类的抽象类，而不是这些其他类的具体类，为了实现这一原则，就要我们在编程的时候针对抽象类或接口编程，而不是针对具体实现编程\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"接口分离原则\")]),s._v(\"：“不应该强迫程序依赖它们不需要使用的方法”，一个接口不需要提供太多的行为，一个接口应该只提供一种对外的功能，不应该把所有的操作都封装到一个接口中\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"迪米特原则\")]),s._v(\"：“一个对象应当对其他对象尽可能少的了解”，降低各个对象之间的耦合度，提高系统的可维护性，在模块之间应该只通过接口编程，而不理会模块的内部工作原理，它可以使各个模块耦合度降到最低，促进软件的复用\")])]),s._v(\" \"),n(\"h2\",{attrs:{id:\"设计模式\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#设计模式\"}},[s._v(\"#\")]),s._v(\" 设计模式\")]),s._v(\" \"),n(\"ul\",[n(\"li\",[n(\"strong\",[s._v(\"简单工厂模式\")]),s._v(\"：又叫静态工厂方法模式，它定义一个具体的工厂负责创建一些类的实例\"),n(\"br\"),s._v(\" \"),n(\"em\",[s._v(\"优点\")]),s._v(\"：客户端不需要负责对象的创建，从而明确了各个类的职责（功能）\"),n(\"br\"),s._v(\" \"),n(\"em\",[s._v(\"缺点\")]),s._v(\"：这个静态工厂类负责所有对象的创建，如果有新的对象增加，或者某些对象的创建方式不同，就需要不断的修改工厂类，不利于后期的维护\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"工厂方法模式\")]),s._v(\"：工程方法模式中抽象工厂类负责定义创建对象的接口，具体对象的创建工作由继承抽象工厂的具体类实现\"),n(\"br\"),s._v(\" \"),n(\"em\",[s._v(\"优点\")]),s._v(\"：客户端不需要负责对象的创建，从而明确了各个类的职责，如果有新的对象增加，只需要增加一个具体的类和具体的工厂类即可，不影响已有的代码，后期维护容易，增强了系统的扩展性\"),n(\"br\"),s._v(\" \"),n(\"em\",[s._v(\"缺点\")]),s._v(\"：需要额外的编写代码，增加了工作量\")]),s._v(\" \"),n(\"li\",[n(\"strong\",[s._v(\"单例设计模式\")]),s._v(\"：单例设计模式就是要确保类在内存中只有一个对象，该实例必须自动创建，并且对外提供\"),n(\"br\"),s._v(\" \"),n(\"em\",[s._v(\"优点\")]),s._v(\"：在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能\"),n(\"br\"),s._v(\" \"),n(\"em\",[s._v(\"缺点\")]),s._v(\"：没有抽象层，因此扩展很难，职责过重，在一定程度上违背了单一职责原则\")])])])}),[],!1,null,null,null);n.default=e.exports}}]);","extractedComments":[]}