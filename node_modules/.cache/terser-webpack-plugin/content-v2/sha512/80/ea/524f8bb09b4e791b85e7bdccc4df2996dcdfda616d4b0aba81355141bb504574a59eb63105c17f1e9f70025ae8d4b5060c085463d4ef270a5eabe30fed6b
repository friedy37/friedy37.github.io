{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{416:function(e,n,s){\"use strict\";s.r(n);var a=s(4),t=Object(a.a)({},(function(){var e=this,n=e._self._c;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"h2\",{attrs:{id:\"p12、mvc-自动配置原理\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#p12、mvc-自动配置原理\"}},[e._v(\"#\")]),e._v(\" P12、MVC 自动配置原理\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"_12-1、官网阅读\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-1、官网阅读\"}},[e._v(\"#\")]),e._v(\" 12.1、官网阅读\")]),e._v(\" \"),n(\"p\",[e._v(\"在进行项目编写前，我们还需要知道一个东西，就是 SpringBoot 对我们的 SpringMVC 还做了哪些配置，包括如何扩展，如何定制。\")]),e._v(\" \"),n(\"p\",[e._v(\"只有把这些都搞清楚了，我们在之后使用才会更加得心应手。途径一：源码分析，途径二：官方文档！\")]),e._v(\" \"),n(\"p\",[e._v(\"地址 ：https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('Spring MVC Auto-configuration\\n// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。\\nSpring Boot provides auto-configuration for Spring MVC that works well with most applications.\\n// 自动配置在Spring默认设置的基础上添加了以下功能：\\nThe auto-configuration adds the following features on top of Spring’s defaults:\\n// 包含视图解析器\\nInclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.\\n// 支持静态资源文件夹的路径，以及webjars\\nSupport for serving static resources, including support for WebJars \\n// 自动注册了Converter：\\n// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把\"1\"字符串自动转换为int类型\\n// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】\\nAutomatic registration of Converter, GenericConverter, and Formatter beans.\\n// HttpMessageConverters\\n// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；\\nSupport for HttpMessageConverters (covered later in this document).\\n// 定义错误代码生成规则的\\nAutomatic registration of MessageCodesResolver (covered later in this document).\\n// 首页定制\\nStatic index.html support.\\n// 图标定制\\nCustom Favicon support (covered later in this document).\\n// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！\\nAutomatic use of a ConfigurableWebBindingInitializer bean (covered later in this document).\\n\\n/*\\n如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己\\n的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供\\nRequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义\\n实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。\\n*/\\nIf you want to keep Spring Boot MVC features and you want to add additional MVC configuration \\n(interceptors, formatters, view controllers, and other features), you can add your own \\n@Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide \\ncustom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or \\nExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.\\n\\n// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。\\nIf you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.\\n')])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"33\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"34\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"35\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"36\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"37\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"38\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"39\")]),n(\"br\")])]),n(\"p\",[e._v(\"我们来仔细对照，看一下它怎么实现的，它告诉我们 SpringBoot 已经帮我们自动配置好了 SpringMVC，然后自动配置了哪些东西呢？\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"_12-2、contentnegotiatingviewresolver-内容协商视图解析器\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-2、contentnegotiatingviewresolver-内容协商视图解析器\"}},[e._v(\"#\")]),e._v(\" 12.2、ContentNegotiatingViewResolver 内容协商视图解析器\")]),e._v(\" \"),n(\"p\",[e._v(\"自动配置了 ViewResolver，就是我们之前学习的 SpringMVC 的视图解析器；\")]),e._v(\" \"),n(\"p\",[e._v(\"即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。\")]),e._v(\" \"),n(\"p\",[e._v(\"我们去看看这里的源码：我们找到 WebMvcAutoConfiguration ， 然后搜索 ContentNegotiatingViewResolver。找到如下方法！\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('@Bean\\n@ConditionalOnBean(ViewResolver.class)\\n@ConditionalOnMissingBean(name = \"viewResolver\", value = ContentNegotiatingViewResolver.class)\\npublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\\n    ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\\n    resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));\\n    // ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级\\n    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\\n    return resolver;\\n}\\n')])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),n(\"br\")])]),n(\"p\",[e._v(\"我们可以点进这类看看！找到对应的解析视图的代码；\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('@Nullable // 注解说明：@Nullable 即参数可为null\\npublic View resolveViewName(String viewName, Locale locale) throws Exception {\\n    RequestAttributes attrs = RequestContextHolder.getRequestAttributes();\\n    Assert.state(attrs instanceof ServletRequestAttributes, \"No current ServletRequestAttributes\");\\n    List<MediaType> requestedMediaTypes = this.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());\\n    if (requestedMediaTypes != null) {\\n        // 获取候选的视图对象\\n        List<View> candidateViews = this.getCandidateViews(viewName, locale, requestedMediaTypes);\\n        // 选择一个最适合的视图对象，然后把这个对象返回\\n        View bestView = this.getBestView(candidateViews, requestedMediaTypes, attrs);\\n        if (bestView != null) {\\n            return bestView;\\n        }\\n    }\\n    // .....\\n}\\n')])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"16\")]),n(\"br\")])]),n(\"p\",[e._v(\"我们继续点进去看，他是怎么获得候选的视图的呢？\")]),e._v(\" \"),n(\"p\",[e._v(\"getCandidateViews 中看到他是把所有的视图解析器拿来，进行 while 循环，挨个解析！\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Iterator var5 = this.viewResolvers.iterator();\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\")])]),n(\"p\",[e._v(\"所以得出结论：\"),n(\"strong\",[e._v(\"ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的\")])]),e._v(\" \"),n(\"p\",[e._v(\"我们再去研究下他的组合逻辑，看到有个属性 viewResolvers，看看它是在哪里进行赋值的！\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"protected void initServletContext(ServletContext servletContext) {\\n    // 这里它是从beanFactory工具中获取容器中的所有视图解析器\\n    // ViewRescolver.class 把所有的视图解析器来组合的\\n    Collection<ViewResolver> matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(this.obtainApplicationContext(), ViewResolver.class).values();\\n    ViewResolver viewResolver;\\n    if (this.viewResolvers == null) {\\n        this.viewResolvers = new ArrayList(matchingBeans.size());\\n    }\\n    // ...............\\n}\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),n(\"br\")])]),n(\"p\",[e._v(\"既然它是在容器中去找视图解析器，我们是否可以猜想，我们就可以去实现一个视图解析器了呢？\")]),e._v(\" \"),n(\"p\",[e._v(\"我们可以自己给容器中去添加一个视图解析器；这个类就会帮我们自动的将它组合进来；\"),n(\"strong\",[e._v(\"我们去实现一下\")])]),e._v(\" \"),n(\"p\",[e._v(\"1、我们在我们的主程序中去写一个视图解析器来试试；\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"@Bean //放到bean中\\npublic ViewResolver myViewResolver(){\\n    return new MyViewResolver();\\n}\\n\\n//我们写一个静态内部类，视图解析器就需要实现ViewResolver接口\\nprivate static class MyViewResolver implements ViewResolver{\\n    @Override\\n    public View resolveViewName(String s, Locale locale) throws Exception {\\n        return null;\\n    }\\n}\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"12\")]),n(\"br\")])]),n(\"p\",[e._v(\"2、怎么看我们自己写的视图解析器有没有起作用呢？\")]),e._v(\" \"),n(\"p\",[e._v(\"我们给 DispatcherServlet 中的 doDispatch 方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中\")]),e._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://img-blog.csdnimg.cn/img_convert/1af49a3b82ed4eb6e983cf40849f1df8.png\",alt:\"\"}})]),e._v(\" \"),n(\"p\",[e._v(\"3、我们启动我们的项目，然后随便访问一个页面，看一下 Debug 信息；\")]),e._v(\" \"),n(\"p\",[e._v(\"找到 this\")]),e._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://img-blog.csdnimg.cn/img_convert/da94e712a5cf0e947ff6b06b62f1cb08.png\",alt:\"\"}})]),e._v(\" \"),n(\"p\",[e._v(\"找到视图解析器，我们看到我们自己定义的就在这里了；\")]),e._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://img-blog.csdnimg.cn/img_convert/f8de080062640b693111dfdcd336631f.png\",alt:\"\"}})]),e._v(\" \"),n(\"p\",[e._v(\"所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情 SpringBoot 就会帮我们做了！\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"_12-3、转换器和格式化器\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-3、转换器和格式化器\"}},[e._v(\"#\")]),e._v(\" 12.3、转换器和格式化器\")]),e._v(\" \"),n(\"p\",[e._v(\"找到格式化转换器：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"@Bean\\n@Override\\npublic FormattingConversionService mvcConversionService() {\\n    // 拿到配置文件中的格式化规则\\n    WebConversionService conversionService = \\n        new WebConversionService(this.mvcProperties.getDateFormat());\\n    addFormatters(conversionService);\\n    return conversionService;\\n}\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\")])]),n(\"p\",[e._v(\"点击去：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"public String getDateFormat() {\\n    return this.dateFormat;\\n}\\n\\n/**\\n* Date format to use. For instance, `dd/MM/yyyy`. 默认的\\n */\\nprivate String dateFormat;\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\")])]),n(\"p\",[e._v(\"可以看到在我们的 Properties 文件中，我们可以进行自动配置它！\")]),e._v(\" \"),n(\"p\",[e._v(\"如果配置了自己的格式化方式，就会注册到 Bean 中生效，我们可以在配置文件中配置日期格式化的规则：\")]),e._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://img-blog.csdnimg.cn/img_convert/b4735809104d12f32a7ed1c6f048c45b.png\",alt:\"\"}})]),e._v(\" \"),n(\"p\",[e._v(\"其余的就不一一举例了，大家可以下去多研究探讨即可！\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"_12-4、修改-springboot-的默认配置\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-4、修改-springboot-的默认配置\"}},[e._v(\"#\")]),e._v(\" 12.4、修改 SpringBoot 的默认配置\")]),e._v(\" \"),n(\"p\",[e._v(\"这么多的自动配置，原理都是一样的，通过这个 WebMVC 的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。\")]),e._v(\" \"),n(\"p\",[e._v(\"SpringBoot 的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；\")]),e._v(\" \"),n(\"p\",[e._v(\"SpringBoot 在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置 @bean），如果有就用用户配置的，如果没有就用自动配置的；\")]),e._v(\" \"),n(\"p\",[e._v(\"如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！\")]),e._v(\" \"),n(\"p\",[n(\"strong\",[e._v(\"扩展使用 SpringMVC\")]),e._v(\" 官方文档如下：\")]),e._v(\" \"),n(\"p\",[e._v(\"If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.\")]),e._v(\" \"),n(\"p\",[e._v(\"我们要做的就是编写一个 @Configuration 注解类，并且类型要为 WebMvcConfigurer，还不能标注 @EnableWebMvc 注解；我们去自己写一个；我们新建一个包叫 config，写一个类 MyMvcConfig；\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('//应为类型要求为WebMvcConfigurer，所以我们实现其接口\\n//可以使用自定义类扩展MVC的功能\\n@Configuration\\npublic class MyMvcConfig implements WebMvcConfigurer {\\n\\n    @Override\\n    public void addViewControllers(ViewControllerRegistry registry) {\\n        // 浏览器发送/test ， 就会跳转到test页面；\\n        registry.addViewController(\"/test\").setViewName(\"test\");\\n    }\\n}\\n')])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"11\")]),n(\"br\")])]),n(\"p\",[e._v(\"我们去浏览器访问一下：\")]),e._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://img-blog.csdnimg.cn/img_convert/dbce122c3d56e5ef17323b29f4fb043f.png\",alt:\"\"}})]),e._v(\" \"),n(\"p\",[n(\"strong\",[e._v(\"确实也跳转过来了！所以说，我们要扩展 SpringMVC，官方就推荐我们这么去使用，既保 SpringBoot 留所有的自动配置，也能用我们扩展的配置！\")])]),e._v(\" \"),n(\"p\",[e._v(\"我们可以去分析一下原理：\")]),e._v(\" \"),n(\"p\",[e._v(\"1、WebMvcAutoConfiguration 是 SpringMVC 的自动配置类，里面有一个类 WebMvcAutoConfigurationAdapter\")]),e._v(\" \"),n(\"p\",[e._v(\"2、这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)\")]),e._v(\" \"),n(\"p\",[e._v(\"3、我们点进 EnableWebMvcConfiguration 这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration\")]),e._v(\" \"),n(\"p\",[e._v(\"这个父类中有这样一段代码：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\\n    private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();\\n    \\n  // 从容器中获取所有的webmvcConfigurer\\n    @Autowired(required = false)\\n    public void setConfigurers(List<WebMvcConfigurer> configurers) {\\n        if (!CollectionUtils.isEmpty(configurers)) {\\n            this.configurers.addWebMvcConfigurers(configurers);\\n        }\\n    }\\n}\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"11\")]),n(\"br\")])]),n(\"p\",[e._v(\"4、我们可以在这个类中去寻找一个我们刚才设置的 viewController 当做参考，发现它调用了一个\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"protected void addViewControllers(ViewControllerRegistry registry) {\\n    this.configurers.addViewControllers(registry);\\n}\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\")])]),n(\"p\",[e._v(\"5、我们点进去看一下\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"public void addViewControllers(ViewControllerRegistry registry) {\\n    Iterator var2 = this.delegates.iterator();\\n\\n    while(var2.hasNext()) {\\n        // 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的\\n        WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();\\n        delegate.addViewControllers(registry);\\n    }\\n\\n}\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),n(\"br\")])]),n(\"p\",[e._v(\"所以得出结论：所有的 WebMvcConfiguration 都会被作用，不止 Spring 自己的配置类，我们自己的配置类当然也会被调用；\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"_12-5、全面接管-springmvc\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-5、全面接管-springmvc\"}},[e._v(\"#\")]),e._v(\" 12.5、全面接管 SpringMVC\")]),e._v(\" \"),n(\"p\",[e._v(\"官方文档：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"If you want to take complete control of Spring MVC\\nyou can add your own @Configuration annotated with @EnableWebMvc.\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\")])]),n(\"p\",[e._v(\"全面接管即：SpringBoot 对 SpringMVC 的自动配置不需要了，所有都是我们自己去配置！\")]),e._v(\" \"),n(\"p\",[e._v(\"只需在我们的配置类中要加一个 @EnableWebMvc。\")]),e._v(\" \"),n(\"p\",[e._v(\"我们看下如果我们全面接管了 SpringMVC 了，我们之前 SpringBoot 给我们配置的静态资源映射一定会无效，我们可以去测试一下；\")]),e._v(\" \"),n(\"p\",[e._v(\"不加注解之前，访问首页：\")]),e._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://img-blog.csdnimg.cn/img_convert/d5baaadd4dee1245ee4d9fb10c11b6bb.png\",alt:\"\"}})]),e._v(\" \"),n(\"p\",[e._v(\"给配置类加上注解：@EnableWebMvc\")]),e._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://img-blog.csdnimg.cn/img_convert/cf7863f7a5d4ee6ecd2c5aa201c9af8d.png\",alt:\"\"}})]),e._v(\" \"),n(\"p\",[e._v(\"我们发现所有的 SpringMVC 自动配置都失效了！回归到了最初的样子；\")]),e._v(\" \"),n(\"p\",[n(\"strong\",[e._v(\"当然，我们开发中，不推荐使用全面接管 SpringMVC\")])]),e._v(\" \"),n(\"p\",[e._v(\"思考问题？为什么加了一个注解，自动配置就失效了！我们看下源码：\")]),e._v(\" \"),n(\"p\",[e._v(\"1、这里发现它是导入了一个类，我们可以继续进去看\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"@Import({DelegatingWebMvcConfiguration.class})public @interface EnableWebMvc {}\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\")])]),n(\"p\",[e._v(\"2、它继承了一个父类 WebMvcConfigurationSupport\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {  // ......}\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\")])]),n(\"p\",[e._v(\"3、我们来回顾一下 Webmvc 自动配置类\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"@Configuration(proxyBeanMethods = false)\\n@ConditionalOnWebApplication(type = Type.SERVLET)\\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\\n// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效\\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\\n    ValidationAutoConfiguration.class })\\npublic class WebMvcAutoConfiguration {\\n    \\n}\\n\")])]),e._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[e._v(\"11\")]),n(\"br\")])]),n(\"p\",[e._v(\"总结一句话：@EnableWebMvc 将 WebMvcConfigurationSupport 组件导入进来了；\")]),e._v(\" \"),n(\"p\",[e._v(\"而导入的 WebMvcConfigurationSupport 只是 SpringMVC 最基本的功能！\")]),e._v(\" \"),n(\"p\",[n(\"strong\",[e._v(\"在 SpringBoot 中会有非常多的扩展配置，只要看见了这个，我们就应该多留心注意~\")])])])}),[],!1,null,null,null);n.default=t.exports}}]);","extractedComments":[]}